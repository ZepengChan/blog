<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>SpringMVC与JPA</title>
    <url>/2020/05/06/SpringMVC%E4%B8%8EJPA/</url>
    <content><![CDATA[<h1 id="SpringMVC-amp-JPA"><a href="#SpringMVC-amp-JPA" class="headerlink" title="SpringMVC &amp; JPA"></a>SpringMVC &amp; JPA</h1><h2 id="SpringMVC工作流程"><a href="#SpringMVC工作流程" class="headerlink" title="SpringMVC工作流程"></a>SpringMVC工作流程</h2><h3 id="开发过程"><a href="#开发过程" class="headerlink" title="开发过程"></a>开发过程</h3><ol>
<li>配置DispatcherServlet前端控制器</li>
<li>开发处理具体业务逻辑的Handler（@Controller、@RequestMapping）</li>
<li>xml配置⽂件配置controller扫描，配置springmvc三⼤件</li>
<li>将xml⽂件路径告诉springmvc（DispatcherServlet）</li>
</ol>
<h3 id="SpringMVC-请求处理流程"><a href="#SpringMVC-请求处理流程" class="headerlink" title="SpringMVC 请求处理流程"></a>SpringMVC 请求处理流程</h3><p><img src="https://gitee.com/KenChan8848/stage_1_module_3_notes/raw/master/image/SpringMVC%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B.jpg" alt=""></p>
<p>第⼀步：⽤户发送请求⾄前端控制器DispatcherServlet</p>
<p>第⼆步：DispatcherServlet收到请求调⽤HandlerMapping处理器映射器</p>
<p>第三步：处理器映射器根据请求Url找到具体的Handler（后端控制器），⽣成处理器对象及处理器拦截<br>器(如果 有则⽣成)⼀并返回DispatcherServlet</p>
<p>第四步：DispatcherServlet调⽤HandlerAdapter处理器适配器去调⽤Handler</p>
<p>第五步：处理器适配器执⾏Handler</p>
<p>第六步：Handler执⾏完成给处理器适配器返回ModelAndView</p>
<p>第七步：处理器适配器向前端控制器返回 ModelAndView，ModelAndView 是SpringMVC 框架的⼀个<br>底层对 象，包括 Model 和 View</p>
<p>第⼋步：前端控制器请求视图解析器去进⾏视图解析，根据逻辑视图名来解析真正的视图。</p>
<p>第九步：视图解析器向前端控制器返回View</p>
<p>第⼗步：前端控制器进⾏视图渲染，就是将模型数据（在 ModelAndView 对象中）填充到 request 域</p>
<p>第⼗⼀步：前端控制器向⽤户响应结果</p>
<h3 id="Spring-MVC-九⼤组件"><a href="#Spring-MVC-九⼤组件" class="headerlink" title="Spring MVC 九⼤组件"></a>Spring MVC 九⼤组件</h3><ul>
<li><p><strong>HandlerMapping（处理器映射器）</strong></p>
<p>HandlerMapping 是⽤来查找 Handler 的，也就是处理器，具体的表现形式可以是类，也可以是<br>⽅法。⽐如，标注了@RequestMapping的每个⽅法都可以看成是⼀个Handler。Handler负责具<br>体实际的请求处理，在请求到达后，HandlerMapping 的作⽤便是找到请求相应的处理器<br>Handler 和 Interceptor.</p>
</li>
<li><p><strong>HandlerAdapter（处理器适配器）</strong></p>
<p>一般handler分两种, 标注了@RequestMapping的每个⽅法以及实现了Controller接口的实现类都可以看成是⼀个Handler, HandlerAdapter的职责就是适配这不同的handler</p>
</li>
<li><p><strong>HandlerExceptionResolver</strong></p>
<p>HandlerExceptionResolver ⽤于处理 Handler 产⽣的异常情况。它的作⽤是根据异常设置<br>ModelAndView，之后交给渲染⽅法进⾏渲染，渲染⽅法会将 ModelAndView 渲染成⻚⾯。</p>
</li>
<li><p><strong>ViewResolver</strong></p>
<p>ViewResolver即视图解析器，⽤于将String类型的视图名和Locale解析为View类型的视图，只有⼀<br>个resolveViewName()⽅法。ViewResolver 在这个过程主要完成两件事情：<br>ViewResolver 找到渲染所⽤的模板（第⼀件⼤事）和所⽤的技术（第⼆件⼤事，其实也就是找到<br>视图的类型，如JSP）并填⼊参数。默认情况下，Spring MVC会⾃动为我们配置⼀个<br>InternalResourceViewResolver,是针对 JSP 类型视图的。</p>
</li>
<li><p><strong>RequestToViewNameTranslator</strong></p>
<p>RequestToViewNameTranslator 组件的作⽤是从请求中获取 ViewName.因为 ViewResolver 根据<br>ViewName 查找 View，但有的 Handler 处理完成之后,没有设置 View，也没有设置 ViewName，<br>便要通过这个组件从请求中查找 ViewName。</p>
</li>
<li><p><strong>LocaleResolver</strong></p>
<p>ViewResolver 组件的 resolveViewName ⽅法需要两个参数，⼀个是视图名，⼀个是 Locale。<br>LocaleResolver ⽤于从请求中解析出 Locale，⽐如中国 Locale 是 zh-CN，⽤来表示⼀个区域。这<br>个组件也是 i18n 的基础。</p>
</li>
<li><p><strong>ThemeResolver</strong></p>
<p>ThemeResolver 组件是⽤来解析主题的。主题是样式、图⽚及它们所形成的显示效果的集合。</p>
</li>
<li><p><strong>MultipartResolver</strong></p>
<p>MultipartResolver ⽤于上传请求，通过将普通的请求包装成 MultipartHttpServletRequest 来实<br>现。MultipartHttpServletRequest 可以通过 getFile() ⽅法 直接获得⽂件。如果上传多个⽂件，还<br>可以调⽤ getFileMap()⽅法得到Map&lt;FileName，File&gt;这样的结构，MultipartResolver 的作⽤就<br>是封装普通的请求，使其拥有⽂件上传的功能。</p>
</li>
<li><p><strong>FlashMapManager</strong></p>
<p>FlashMap ⽤于重定向时的参数传递，只需要在重定向之前将要传递的数据写⼊请求（可以通过<br>ServletRequestAttributes.getRequest()⽅法获得）的属性OUTPUT_FLASH_MAP_ATTRIBUTE<br>中，这样在重定向之后的Handler中Spring就会⾃动将其设置到Model中，在显示订单信息的⻚⾯<br>上就可以直接从Model中获取数据。FlashMapManager 就是⽤来管理 FalshMap 的。</p>
</li>
</ul>
<h2 id="拦截器-Inteceptor"><a href="#拦截器-Inteceptor" class="headerlink" title="拦截器(Inteceptor)"></a>拦截器(Inteceptor)</h2><h3 id="监听器、过滤器和拦截器对⽐"><a href="#监听器、过滤器和拦截器对⽐" class="headerlink" title="监听器、过滤器和拦截器对⽐"></a>监听器、过滤器和拦截器对⽐</h3><ul>
<li><p>Servlet：处理Request请求和Response响应</p>
</li>
<li><p>过滤器（Filter）：对Request请求起到过滤的作⽤，作⽤在Servlet之前，如果配置为/*可以对所有的资源访问（servlet、js/css静态资源等）进⾏过滤处理</p>
</li>
<li><p>监听器（Listener）：实现了javax.servlet.ServletContextListener 接⼝的服务器端组件，它随Web应⽤的启动⽽启动，只初始化⼀次，然后会⼀直运⾏监视，随Web应⽤的停⽌⽽销毁</p>
<p><strong>作⽤⼀：</strong>做⼀些初始化⼯作，web应⽤中spring容器启动ContextLoaderListener</p>
<p><strong>作⽤⼆：</strong>监听web中的特定事件，⽐如HttpSession,ServletRequest的创建和销毁；变量的创建、销毁和修改等。可以在某些动作前后增加处理，实现监控，⽐如统计在线⼈数，利⽤HttpSessionLisener等。</p>
</li>
<li><p>拦截器（Interceptor）：是SpringMVC、Struts等表现层框架⾃⼰的，不会拦截jsp/html/css/image的访问等，只会拦截访问的控制器⽅法（Handler）。</p>
<p>从配置的⻆度也能够总结发现：serlvet、filter、listener是配置在web.xml中的，⽽interceptor是配置在表现层框架⾃⼰的配置⽂件中的</p>
<ul>
<li>在Handler业务逻辑执⾏之前拦截⼀次</li>
<li>在Handler逻辑执⾏完毕但未跳转⻚⾯之前拦截⼀次</li>
<li>在跳转⻚⾯之后拦截⼀次</li>
</ul>
</li>
</ul>
<h3 id="拦截器的执⾏流程"><a href="#拦截器的执⾏流程" class="headerlink" title="拦截器的执⾏流程"></a>拦截器的执⾏流程</h3><p><img src="https://gitee.com/KenChan8848/stage_1_module_3_notes/raw/master/image/%E6%8B%A6%E6%88%AA%E5%99%A8%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.jpg" alt="单个拦截器执行流程"></p>
<ol>
<li>程序先执⾏preHandle()⽅法，如果该⽅法的返回值为true，则程序会继续向下执⾏处理器中的⽅<br>法，否则将不再向下执⾏。</li>
<li>在业务处理器（即控制器Controller类）处理完请求后，会执⾏postHandle()⽅法，然后会通过<br>DispatcherServlet向客户端返回响应。</li>
<li>在DispatcherServlet处理完请求后，才会执⾏afterCompletion()⽅法。</li>
</ol>
<h3 id="多个拦截器的执⾏流程"><a href="#多个拦截器的执⾏流程" class="headerlink" title="多个拦截器的执⾏流程"></a>多个拦截器的执⾏流程</h3><p><img src="https://gitee.com/KenChan8848/stage_1_module_3_notes/raw/master/image/%E5%A4%9A%E4%B8%AA%E6%8B%A6%E6%88%AA%E5%99%A8%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.jpg" alt="多个拦截器执行流程"></p>
<p>从图可以看出，当有多个拦截器同时⼯作时，它们的preHandle()⽅法会按照配置⽂件中拦截器的配置<br>顺序执⾏，⽽它们的postHandle()⽅法和afterCompletion()⽅法则会按照配置顺序的反序执⾏。</p>
<h2 id="SpringMVC-源码"><a href="#SpringMVC-源码" class="headerlink" title="SpringMVC 源码"></a>SpringMVC 源码</h2><h3 id="核心流程"><a href="#核心流程" class="headerlink" title="核心流程"></a>核心流程</h3><ul>
<li>SpringMVC处理请求的流程即为<br>org.springframework.web.servlet.DispatcherServlet#doDispatch⽅法的执⾏过程，其中步骤<br>2、3、4、5是核⼼步骤<br>1）调⽤getHandler()获取到能够处理当前请求的执⾏链 HandlerExecutionChain（Handler+拦截<br>器）<br>但是如何去getHandler的？后⾯进⾏分析<br>2）调⽤getHandlerAdapter()；获取能够执⾏1）中Handler的适配器<br>但是如何去getHandlerAdapter的？后⾯进⾏分析<br>3）适配器调⽤Handler执⾏ha.handle（总会返回⼀个ModelAndView对象）<br>4）调⽤processDispatchResult()⽅法完成视图渲染跳转</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		HttpServletRequest processedRequest = request;</span><br><span class="line">		HandlerExecutionChain mappedHandler = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">boolean</span> multipartRequestParsed = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">		WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			ModelAndView mv = <span class="keyword">null</span>;</span><br><span class="line">			Exception dispatchException = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				<span class="comment">// 1 检查是否是文件上传的请求</span></span><br><span class="line">				processedRequest = checkMultipart(request);</span><br><span class="line">				multipartRequestParsed = (processedRequest != request);</span><br><span class="line"></span><br><span class="line">				<span class="comment">// Determine handler for the current request.</span></span><br><span class="line">				<span class="comment">/*</span></span><br><span class="line"><span class="comment">				 	2 取得处理当前请求的Controller，这里也称为Handler，即处理器</span></span><br><span class="line"><span class="comment">				 	  这里并不是直接返回 Controller，而是返回 HandlerExecutionChain 请求处理链对象</span></span><br><span class="line"><span class="comment">				 	  该对象封装了Handler和Inteceptor</span></span><br><span class="line"><span class="comment">				 */</span></span><br><span class="line">				mappedHandler = getHandler(processedRequest);</span><br><span class="line">				<span class="keyword">if</span> (mappedHandler == <span class="keyword">null</span>) &#123;</span><br><span class="line">					<span class="comment">// 如果 handler 为空，则返回404</span></span><br><span class="line">					noHandlerFound(processedRequest, response);</span><br><span class="line">					<span class="keyword">return</span>;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="comment">// Determine handler adapter for the current request.</span></span><br><span class="line">				<span class="comment">// 3 获取处理请求的处理器适配器 HandlerAdapter</span></span><br><span class="line">				HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());</span><br><span class="line"></span><br><span class="line">				<span class="comment">// Process last-modified header, if supported by the handler.</span></span><br><span class="line">				<span class="comment">// 处理 last-modified 请求头</span></span><br><span class="line">				String method = request.getMethod();</span><br><span class="line">				<span class="keyword">boolean</span> isGet = <span class="string">"GET"</span>.equals(method);</span><br><span class="line">				<span class="keyword">if</span> (isGet || <span class="string">"HEAD"</span>.equals(method)) &#123;</span><br><span class="line">					<span class="keyword">long</span> lastModified = ha.getLastModified(request, mappedHandler.getHandler());</span><br><span class="line">					<span class="keyword">if</span> (<span class="keyword">new</span> ServletWebRequest(request, response).checkNotModified(lastModified) &amp;&amp; isGet) &#123;</span><br><span class="line">						<span class="keyword">return</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class="line">					<span class="keyword">return</span>;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="comment">// Actually invoke the handler.</span></span><br><span class="line">				<span class="comment">// 4 实际处理器处理请求，返回结果视图对象</span></span><br><span class="line">				mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">					<span class="keyword">return</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="comment">// 结果视图对象的处理</span></span><br><span class="line">				applyDefaultViewName(processedRequest, mv);</span><br><span class="line">				mappedHandler.applyPostHandle(processedRequest, response, mv);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">				dispatchException = ex;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">catch</span> (Throwable err) &#123;</span><br><span class="line">				<span class="comment">// As of 4.3, we're processing Errors thrown from handler methods as well,</span></span><br><span class="line">				<span class="comment">// making them available for @ExceptionHandler methods and other scenarios.</span></span><br><span class="line">				dispatchException = <span class="keyword">new</span> NestedServletException(<span class="string">"Handler dispatch failed"</span>, err);</span><br><span class="line">			&#125;</span><br><span class="line">			processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">			<span class="comment">//最终会调用HandlerInterceptor的afterCompletion 方法</span></span><br><span class="line">			triggerAfterCompletion(processedRequest, response, mappedHandler, ex);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (Throwable err) &#123;</span><br><span class="line">			<span class="comment">//最终会调用HandlerInterceptor的afterCompletion 方法</span></span><br><span class="line">			triggerAfterCompletion(processedRequest, response, mappedHandler,</span><br><span class="line">					<span class="keyword">new</span> NestedServletException(<span class="string">"Handler processing failed"</span>, err));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">finally</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">				<span class="comment">// Instead of postHandle and afterCompletion</span></span><br><span class="line">				<span class="keyword">if</span> (mappedHandler != <span class="keyword">null</span>) &#123;</span><br><span class="line">					mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="comment">// Clean up any resources used by a multipart request.</span></span><br><span class="line">				<span class="keyword">if</span> (multipartRequestParsed) &#123;</span><br><span class="line">					cleanupMultipart(processedRequest);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<h3 id="getHandler⽅法剖析"><a href="#getHandler⽅法剖析" class="headerlink" title="getHandler⽅法剖析"></a>getHandler⽅法剖析</h3><p>遍历两个HandlerMapping，试图获取能够处理当前请求的执⾏链</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> HandlerExecutionChain <span class="title">getHandler</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.handlerMappings != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">for</span> (HandlerMapping mapping : <span class="keyword">this</span>.handlerMappings) &#123;</span><br><span class="line">				HandlerExecutionChain handler = mapping.getHandler(request);</span><br><span class="line">				<span class="keyword">if</span> (handler != <span class="keyword">null</span>) &#123;</span><br><span class="line">					<span class="keyword">return</span> handler;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<h3 id="getHandlerAdapter⽅法剖析"><a href="#getHandlerAdapter⽅法剖析" class="headerlink" title="getHandlerAdapter⽅法剖析"></a>getHandlerAdapter⽅法剖析</h3><p>遍历各个HandlerAdapter，看哪个Adapter⽀持处理当前Handler</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> HandlerAdapter <span class="title">getHandlerAdapter</span><span class="params">(Object handler)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.handlerAdapters != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">for</span> (HandlerAdapter adapter : <span class="keyword">this</span>.handlerAdapters) &#123;</span><br><span class="line">				<span class="keyword">if</span> (adapter.supports(handler)) &#123;</span><br><span class="line">					<span class="keyword">return</span> adapter;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">"No adapter for handler ["</span> + handler +</span><br><span class="line">				<span class="string">"]: The DispatcherServlet configuration needs to include a HandlerAdapter that supports this handler"</span>);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<h3 id="ha-handle⽅法剖析"><a href="#ha-handle⽅法剖析" class="headerlink" title="ha.handle⽅法剖析"></a>ha.handle⽅法剖析</h3><p>实际调用的是org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter#handleInternal</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">handleInternal</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">			HttpServletResponse response, HandlerMethod handlerMethod)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">		ModelAndView mav;</span><br><span class="line">		checkRequest(request);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Execute invokeHandlerMethod in synchronized block if required.</span></span><br><span class="line">		<span class="comment">// 判断当前是否需要支持在同一个session中只能线性地处理请求</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.synchronizeOnSession) &#123;</span><br><span class="line">			<span class="comment">// 获取当前请求的session对象</span></span><br><span class="line">			HttpSession session = request.getSession(<span class="keyword">false</span>);</span><br><span class="line">			<span class="keyword">if</span> (session != <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="comment">// 为当前session生成一个唯一的可以用于锁定的key</span></span><br><span class="line">				Object mutex = WebUtils.getSessionMutex(session);</span><br><span class="line">				<span class="keyword">synchronized</span> (mutex) &#123;</span><br><span class="line">					<span class="comment">// 对HandlerMethod进行参数等的适配处理，并调用目标handler</span></span><br><span class="line">					mav = invokeHandlerMethod(request, response, handlerMethod);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="comment">// No HttpSession available -&gt; no mutex necessary</span></span><br><span class="line">				<span class="comment">// 如果当前不存在session，则直接对HandlerMethod进行适配</span></span><br><span class="line">				mav = invokeHandlerMethod(request, response, handlerMethod);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">// No synchronization on session demanded at all...</span></span><br><span class="line">			<span class="comment">// 如果当前不需要对session进行同步处理，则直接对HandlerMethod进行适配</span></span><br><span class="line">			mav = invokeHandlerMethod(request, response, handlerMethod);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (!response.containsHeader(HEADER_CACHE_CONTROL)) &#123;</span><br><span class="line">			<span class="keyword">if</span> (getSessionAttributesHandler(handlerMethod).hasSessionAttributes()) &#123;</span><br><span class="line">				applyCacheSeconds(response, <span class="keyword">this</span>.cacheSecondsForSessionAttributeHandlers);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				prepareResponse(response);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> mav;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<h3 id="processDispatchResult⽅法剖析"><a href="#processDispatchResult⽅法剖析" class="headerlink" title="processDispatchResult⽅法剖析"></a>processDispatchResult⽅法剖析</h3><p>内部核心是调用了</p>
<p>org.springframework.web.servlet.DispatcherServlet#render                                </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processDispatchResult</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">			@Nullable HandlerExecutionChain mappedHandler, @Nullable ModelAndView mv,</span></span></span><br><span class="line"><span class="function"><span class="params">			@Nullable Exception exception)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">boolean</span> errorView = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (exception != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (exception <span class="keyword">instanceof</span> ModelAndViewDefiningException) &#123;</span><br><span class="line">				logger.debug(<span class="string">"ModelAndViewDefiningException encountered"</span>, exception);</span><br><span class="line">				mv = ((ModelAndViewDefiningException) exception).getModelAndView();</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				Object handler = (mappedHandler != <span class="keyword">null</span> ? mappedHandler.getHandler() : <span class="keyword">null</span>);</span><br><span class="line">				<span class="comment">//异常处理</span></span><br><span class="line">				mv = processHandlerException(request, response, handler, exception);</span><br><span class="line">				errorView = (mv != <span class="keyword">null</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Did the handler return a view to render?</span></span><br><span class="line">		<span class="keyword">if</span> (mv != <span class="keyword">null</span> &amp;&amp; !mv.wasCleared()) &#123;</span><br><span class="line">			<span class="comment">/***************************************</span></span><br><span class="line"><span class="comment">			****************************************</span></span><br><span class="line"><span class="comment">						核心render方法</span></span><br><span class="line"><span class="comment">			****************************************</span></span><br><span class="line"><span class="comment">			****************************************/</span></span><br><span class="line">			render(mv, request, response);</span><br><span class="line">			<span class="keyword">if</span> (errorView) &#123;</span><br><span class="line">				WebUtils.clearErrorRequestAttributes(request);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">				logger.trace(<span class="string">"No view rendering, null ModelAndView returned."</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;</span><br><span class="line">			<span class="comment">// Concurrent handling started during a forward</span></span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (mappedHandler != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="comment">//调用拦截器的拦截方法</span></span><br><span class="line">			mappedHandler.triggerAfterCompletion(request, response, <span class="keyword">null</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>再嵌套调用了 </p>
<p>​        org.springframework.web.servlet.view.AbstractView#render</p>
<p>​                   org.springframework.web.servlet.view.InternalResourceView#renderMergedOutputModel</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">renderMergedOutputModel</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">			Map&lt;String, Object&gt; model, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Expose the model object as request attributes.</span></span><br><span class="line">		<span class="comment">//对request 设置属性值</span></span><br><span class="line">		exposeModelAsRequestAttributes(model, request);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Expose helpers as request attributes, if any.</span></span><br><span class="line">		exposeHelpers(request);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Determine the path for the request dispatcher.</span></span><br><span class="line">		String dispatcherPath = prepareForRendering(request, response);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Obtain a RequestDispatcher for the target resource (typically a JSP).</span></span><br><span class="line">		RequestDispatcher rd = getRequestDispatcher(request, dispatcherPath);</span><br><span class="line">		<span class="keyword">if</span> (rd == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">"Could not get RequestDispatcher for ["</span> + getUrl() +</span><br><span class="line">					<span class="string">"]: Check that the corresponding file exists within your web application archive!"</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// If already included or response already committed, perform include, else forward.</span></span><br><span class="line">		<span class="keyword">if</span> (useInclude(request, response)) &#123;</span><br><span class="line">			response.setContentType(getContentType());</span><br><span class="line">			<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">				logger.debug(<span class="string">"Including ["</span> + getUrl() + <span class="string">"]"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			rd.include(request, response);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">// Note: The forwarded resource is supposed to determine the content type itself.</span></span><br><span class="line">			<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">				logger.debug(<span class="string">"Forwarding to ["</span> + getUrl() + <span class="string">"]"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">            <span class="comment">/* 跳转页面的操作 */</span></span><br><span class="line">			rd.forward(request, response);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>





<h2 id="Spring-Data-JPA"><a href="#Spring-Data-JPA" class="headerlink" title="Spring Data JPA"></a>Spring Data JPA</h2><p>Spring Data JPA 是 Spring 提供的⼀个封装了JPA 操作的框架，⽽ JPA 仅仅是规范，单独使⽤规范⽆法<br>具体做什么，那么Spring Data JPA 、 JPA规范 以及 Hibernate （JPA 规范的⼀种实现）之间的关系是什<br>么？</p>
<p><img src="https://gitee.com/KenChan8848/stage_1_module_3_notes/raw/master/image/JPA.jpg" alt="JPA"></p>
<p>JPA 是⼀套规范，内部是由接⼝和抽象类组成的，Hiberanate 是⼀套成熟的 ORM 框架，⽽且<br>Hiberanate 实现了 JPA 规范，所以可以称 Hiberanate 为 JPA 的⼀种实现⽅式，我们使⽤ JPA 的 API 编<br>程，意味着站在更⾼的⻆度去看待问题（⾯向接⼝编程）。</p>
]]></content>
  </entry>
  <entry>
    <title>Spring学习笔记</title>
    <url>/2020/05/06/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Spring学习笔记"><a href="#Spring学习笔记" class="headerlink" title="Spring学习笔记"></a>Spring学习笔记</h1><h2 id="Spring的优势"><a href="#Spring的优势" class="headerlink" title="Spring的优势"></a>Spring的优势</h2><ul>
<li><p><strong>⽅便解耦，简化开发</strong><br>通过Spring提供的IoC容器，可以将对象间的依赖关系交由Spring进⾏控制，避免硬编码所造成的<br>过度程序耦合。⽤户也不必再为单例模式类、属性⽂件解析等这些很底层的需求编写代码，可以更<br>专注于上层的应⽤。</p>
</li>
<li><p><strong>AOP编程的⽀持</strong><br>通过Spring的AOP功能，⽅便进⾏⾯向切⾯的编程，许多不容易⽤传统OOP实现的功能可以通过<br>AOP轻松应付。</p>
</li>
<li><p><strong>声明式事务的⽀持</strong><br>@Transactional<br>可以将我们从单调烦闷的事务管理代码中解脱出来，通过声明式⽅式灵活的进⾏事务的管理，提⾼<br>开发效率和质量。</p>
</li>
<li><p><strong>⽅便程序的测试</strong><br>可以⽤⾮容器依赖的编程⽅式进⾏⼏乎所有的测试⼯作，测试不再是昂贵的操作，⽽是随⼿可做的<br>事情。</p>
</li>
<li><p><strong>⽅便集成各种优秀框架</strong><br>Spring可以降低各种框架的使⽤难度，提供了对各种优秀框架（Struts、Hibernate、Hessian、<br>Quartz等）的直接⽀持。</p>
</li>
<li><p><strong>降低JavaEE API的使⽤难度</strong><br>Spring对JavaEE API（如JDBC、JavaMail、远程调⽤等）进⾏了薄薄的封装层，使这些API的使⽤<br>难度⼤为降低。</p>
</li>
<li><p><strong>源码是经典的 Java 学习范例</strong><br>Spring的源代码设计精妙、结构清晰、匠⼼独⽤，处处体现着⼤师对Java设计模式灵活运⽤以及对<br>Java技术的⾼深造诣。它的源代码⽆意是Java技术的最佳实践的范例。</p>
</li>
</ul>
<h2 id="Spring-IoC"><a href="#Spring-IoC" class="headerlink" title="Spring IoC"></a>Spring IoC</h2><h3 id="bean的生命周期"><a href="#bean的生命周期" class="headerlink" title="bean的生命周期"></a>bean的生命周期</h3><p>bean的生命周期是指一个bean对象从创建到销毁的过程. bean不等于普通对象, 是里胡一个java对象只是bean的生命周期过程的一步,只有走完了流程, 才能称之为bean. 核心过程如下:</p>
<ol>
<li><p><strong>实例化bean</strong>: 主要通过反射技术实例化</p>
</li>
<li><p><strong>设置对象属性(依赖注入)</strong></p>
</li>
<li><p><strong>处理Aware接口</strong></p>
<p>如果实现了xxxAware接口, 会将相关的xxxAware实例注入给bean</p>
<p>如果实现了BeanNameAware接口,会调用它实现的setBeanName(String beanId)方法</p>
<p>如果事项了BeanFactoryAware接口, 会调用它实现的setBeanFactory()方法, 传递的是Spring工厂</p>
<p>如果实现了ApplicationContextAware接口, 会调用它实现的setApplicationContext()方法,传递的是Spring上下文</p>
</li>
<li><p><strong>BeanPostProcessor:</strong></p>
<p>如果实现了此接口,会调用 postProcessBeforeInitialization()方法</p>
</li>
<li><p><strong>InitializingBean与 init-method:</strong></p>
<p>实现bean初始化的一些逻辑</p>
<p>如果配置了init-method,则会自动调用此方法,完成自定义初始化逻辑</p>
</li>
<li><p>如果实现了<strong>BeanPostProcessor</strong>接口,会调用 postProcessAfterInitialization()方法</p>
</li>
<li><p><strong>DisposableBean</strong>:</p>
<p>当bean不需要使用时, 会经过清理阶段, 如果实现了此接口, 则会调用它实现的destroy()方法</p>
</li>
<li><p>最后,如果配置了<strong>destroy-method:</strong>则会自动调用此方法,完成自定义销毁逻辑</p>
</li>
</ol>
<h3 id="高级特性"><a href="#高级特性" class="headerlink" title="高级特性"></a>高级特性</h3><h4 id="lazy-Init-延迟加载"><a href="#lazy-Init-延迟加载" class="headerlink" title="lazy-Init 延迟加载"></a>lazy-Init 延迟加载</h4><p>设置 lazy-init 为 true 或者注解 @Lazy 的 bean 将不会在 ApplicationContext 启动时提前被实例化，⽽是第⼀次向容器<br>通过 getBean 索取 bean 或者在 bean被其他立即实例化的bean引用时实例化的。</p>
<h4 id="FactoryBean-和-BeanFactory"><a href="#FactoryBean-和-BeanFactory" class="headerlink" title="FactoryBean 和 BeanFactory"></a>FactoryBean 和 BeanFactory</h4><p>BeanFactory接⼝是容器的顶级接⼝，定义了容器的⼀些基础⾏为，负责⽣产和管理Bean的⼀个⼯⼚，<br>具体使⽤它下⾯的⼦接⼝类型，⽐如ApplicationContext；此处我们重点分析FactoryBean</p>
<p>Spring中Bean有两种，⼀种是普通Bean，⼀种是⼯⼚Bean（FactoryBean），FactoryBean可以⽣成<br>某⼀个类型的Bean实例（返回给我们），也就是说我们可以借助于它⾃定义Bean的创建过程。</p>
<p>自定义FactoryBean </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 可以让我们⾃定义Bean的创建过程（完成复杂Bean的定义）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FactoryBean</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="comment">// 返回FactoryBean创建的Bean实例，如果isSingleton返回true，则该实例会放到Spring容器的单例对象缓存池中Map</span></span><br><span class="line">    <span class="function">T <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="comment">// 返回FactoryBean创建的Bean类型</span></span><br><span class="line">    Class&lt;?&gt; getObjectType();</span><br><span class="line">    <span class="comment">// 返回作⽤域是否单例</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  	  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="后置处理器"><a href="#后置处理器" class="headerlink" title="后置处理器"></a>后置处理器</h4><p>Spring提供了两种后处理bean的扩展接⼝, 分别为 BeanPostProcessor 和BeanFactoryPostProcessor，两者在使⽤上是有所区别的。⼯⼚初始化（BeanFactory）—&gt; Bean, 对象在BeanFactory初始化之后可以使⽤BeanFactoryPostProcessor进⾏后置处理, 做⼀些事情在Bean对象实例化（并不是Bean的整个⽣命周期完成）之后可以使⽤BeanPostProcessor进⾏后置处理做⼀些事情<br>注意：对象不⼀定是springbean，⽽springbean⼀定是个对象</p>
<h3 id="自动装配"><a href="#自动装配" class="headerlink" title="自动装配"></a>自动装配</h3><p>有五种自动装配方式, 可以用来知道Spring容器用自动装配方式来依赖注入:</p>
<ul>
<li><strong>no</strong>: 默认不进行自动装配, 通过显式设置ref属性来进行装配</li>
<li><strong>byName</strong>: 通过参数名自动装配, Spring容器在配置文件中发现bean的autowire属性被设置成byName,止呕容器试图装配和该bean的属性具有相同名字的bean</li>
<li><strong>byType</strong>: 通过参数类型自动装配, Spring容器在配置文件中发现bean的autowire属性被设置成byType，之后容器试图匹配、装配和该bean的属性具有相同类型的bean。如果有多个bean符合条件，则抛出错误。</li>
<li><strong>constructor</strong>：这个方式类似于byType，但是要提供给构造器参数，如果没有确定的带参数的构造器参数类型，将会抛出异常。</li>
<li><strong>autodetect</strong>：首先尝试使用constructor来自动装配，如果无法工作，则使用byType方式。</li>
</ul>
<h2 id="SpringAOP及应用"><a href="#SpringAOP及应用" class="headerlink" title="SpringAOP及应用"></a>SpringAOP及应用</h2><h3 id="AOP的实现"><a href="#AOP的实现" class="headerlink" title="AOP的实现"></a>AOP的实现</h3><p>Spring 实现AOP思想使⽤的是动态代理技术<br>默认情况下，Spring会根据被代理对象是否实现接⼝来选择使⽤JDK还是CGLIB。当被代理对象没有实现<br>任何接⼝时，Spring会选择CGLIB。当被代理对象实现了接⼝，Spring会选择JDK官⽅的代理技术，不过<br>我们可以通过配置的⽅式，让Spring强制使⽤CGLIB</p>
<h3 id="Spring-声明式事务的⽀持"><a href="#Spring-声明式事务的⽀持" class="headerlink" title="Spring 声明式事务的⽀持"></a>Spring 声明式事务的⽀持</h3><p><strong>编程式事务</strong>：在业务代码中添加事务控制代码，这样的事务控制机制就叫做编程式事务<br>        <strong>声明式事务</strong>：通过xml或者注解配置的⽅式达到事务控制的⽬的，叫做声明式事务</p>
<h4 id="事务的四大特性"><a href="#事务的四大特性" class="headerlink" title="事务的四大特性"></a>事务的四大特性</h4><ul>
<li><p>原⼦性（Atomicity） 原⼦性是指事务是⼀个不可分割的⼯作单位，事务中的操作要么都发⽣，要么都<br>不发⽣。从操作的⻆度来描述，事务中的各个操作要么都成功要么都失败</p>
</li>
<li><p>⼀致性（Consistency）事务必须使数据库从⼀个⼀致性状态变换到另外⼀个⼀致性状态。<br>例如转账前A有1000，B有1000。转账后A+B也得是2000。<br>⼀致性是从数据的⻆度来说的，（1000，1000） （900，1100），不应该出现（900，1000）</p>
</li>
<li><p>隔离性（Isolation）事务的隔离性是多个⽤户并发访问数据库时，数据库为每⼀个⽤户开启的事务，<br>每个事务不能被其他事务的操作数据所⼲扰，多个并发事务之间要相互隔离。<br>⽐如：事务1给员⼯涨⼯资2000，但是事务1尚未被提交，员⼯发起事务2查询⼯资，发现⼯资涨了2000<br>块钱，读到了事务1尚未提交的数据（脏读）</p>
</li>
<li><p>持久性（Durability）持久性是指⼀个事务⼀旦被提交，它对数据库中数据的改变就是永久性的，接下来即使数据库发⽣故障<br>也不应该对其有任何影响。</p>
</li>
</ul>
<h4 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h4><ul>
<li><p>Serializable（串⾏化）：可避免脏读、不可重复读、虚读情况的发⽣。（串⾏化） 最⾼</p>
</li>
<li><p>Repeatable read（可重复读）：可避免脏读、不可重复读情况的发⽣。(幻读有可能发⽣) 第⼆<br>该机制下会对要update的⾏进⾏加锁</p>
</li>
<li><p>Read committed（读已提交）：可避免脏读情况发⽣。不可重复读和幻读⼀定会发⽣。 第三</p>
</li>
<li><p>Read uncommitted（读未提交）：最低级别，以上情况均⽆法保证。(读未提交) 最低</p>
<table>
<thead>
<tr>
<th>事务隔离级别</th>
<th>脏读</th>
<th>不可重复度</th>
<th>幻读</th>
</tr>
</thead>
<tbody><tr>
<td>Read uncommitted（读未提交）</td>
<td>是</td>
<td>是</td>
<td>是</td>
</tr>
<tr>
<td>Read committed（读已提交)</td>
<td>否</td>
<td>是</td>
<td>是</td>
</tr>
<tr>
<td>Repeatable read（可重复读）</td>
<td>否</td>
<td>否</td>
<td>是</td>
</tr>
<tr>
<td>Serializable(串行化)</td>
<td>否</td>
<td>否</td>
<td>否</td>
</tr>
</tbody></table>
</li>
</ul>
<h2 id="Spring设计模式"><a href="#Spring设计模式" class="headerlink" title="Spring设计模式"></a>Spring设计模式</h2><ul>
<li><p><strong>工厂设计模式</strong>:  BeanFactory, ApplicationContext 通过工厂模式创建对象</p>
</li>
<li><p><strong>代理设计模式</strong>:  SrpingAOP 用到了JDK动态代理和CGLIB动态代理</p>
</li>
<li><p><strong>单例设计模式</strong>:  bean默认都是单例</p>
</li>
<li><p><strong>模板方法模式</strong>:  jdbcTemplate, hibernateTemplate 等以Template结尾的对数据库操作的类,用到了模板设计模式</p>
</li>
<li><p><strong>包装器设计模式</strong>:  动态数据源的支持</p>
</li>
<li><p><strong>观察者设计模式</strong>:   Spring时间驱动模型</p>
</li>
<li><p><strong>适配器模式</strong>:   SpringAOP的增强或者通知(Advice)使用了适配器模式, SpringMVC也是用到了该模式适配Controller</p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>mybatis学习笔记</title>
    <url>/2020/05/06/mybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="mybatis学习笔记"><a href="#mybatis学习笔记" class="headerlink" title="mybatis学习笔记"></a>mybatis学习笔记</h1><h3 id="mybatis解决JDBC的问题"><a href="#mybatis解决JDBC的问题" class="headerlink" title="mybatis解决JDBC的问题:"></a>mybatis解决JDBC的问题:</h3><p>1.数据库连接创建, 释放频繁造成系统资源的浪费</p>
<p>2.sql语句在代码中硬编码, 造成代码不易维护, 实际使用中sql变化比较大, 改变sql需要改变java代码.</p>
<p>3.使用preparedStatement向有占位符传参存在硬编码</p>
<p>4.对结果集封装也存在硬编码.</p>
<p>解决: mybatis 提供连接池, 通过配置文件解决硬编码,  通过反射内省自动封装结果集</p>
<h3 id="自定义框架设计"><a href="#自定义框架设计" class="headerlink" title="自定义框架设计:"></a>自定义框架设计:</h3><h5 id="大概流程"><a href="#大概流程" class="headerlink" title="大概流程:"></a>大概流程:</h5><p>1.加载xml配置文件,封装成configuration对象(封装了数据库连接池的相关信息,以及所有配置文件的信息)</p>
<p>2.将配置文件中,以namespace.statementId为唯一表示,存放到map中,value为具体需要执行的,自己封装的mappedStatement(封装了数据库的连接)</p>
<p>3.在执行相对应的方法,通过传入的namespace.statementId获取对应的mappedStatement,注册驱动,获取连接,解析sql,填充参数,最后执行. 或者使用mapper的动态代理对象,直接调用相对应的方法执行.这里需要满足statementId与接口的方法名相同</p>
<h5 id="框架核心所运用的设计模式"><a href="#框架核心所运用的设计模式" class="headerlink" title="框架核心所运用的设计模式:"></a>框架核心所运用的设计模式:</h5><p>构建者设计模式( 当一个复杂对象在初始化过于复杂时,我们使用该设计模式,一步一步构建小对象,最后构成复杂对象)</p>
<p>工厂设计模式(创建对象的工作在工厂方法代码里面,根据传入参数的不同,获取不通的对象)</p>
<p>代理模式(对象的方法执行由代理对象完成)</p>
<p>JDK动态代理:由代理模式衍生出来. 需要满足, 代理的对象实现了接口. 最终生成的代理对象,每次执行方法,都会去调用invoke(),这样就可以在方法执行前后,我们对方法进行增长.</p>
<h3 id="mybatis动态sql"><a href="#mybatis动态sql" class="headerlink" title="mybatis动态sql:"></a>mybatis动态sql:</h3><p> mybatis动态sql是当我们的业务逻辑比较复杂时,需要将sql动态变化,根据我们传入的实体类或者参数,使用不同的sql语言进行查询.</p>
<p>​    动态sql: </p>
<ol>
<li><p>if 语句 (简单的条件判断)</p>
</li>
<li><p>choose(when, otherwize)</p>
</li>
<li><p>trim (对包含的内容加上 prefix,或者 suffix 等，前缀，后缀)</p>
</li>
<li><p>where (主要是用来简化sql语句中where条件判断的，能智能的处理 and or )</p>
</li>
<li><p>set (用于update)</p>
</li>
<li><p>foreach (用于 in语句)</p>
<p>原理:</p>
<p>mybatis将xml的sql语句封装成一个个节点,每个节点都是一种动态sql类型的描述,例如  IfSqlNode, 每个动态sql有多个SqlNode构成,都需要实现内部定义的抽象方法apply(), 在sql执行的时候, 这个apply方法会依次执行子节点的apply(), 这样递归执行下去, 构建动态sql中prepareStatement的参数, 并保存最终生成sql的StringBuilder对象. 最终执行 sql</p>
</li>
</ol>
<h3 id="mybatis映射"><a href="#mybatis映射" class="headerlink" title="mybatis映射:"></a>mybatis映射:</h3><h5 id="一对一"><a href="#一对一" class="headerlink" title="一对一:"></a>一对一:</h5><p>创建映射实体类:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> Date ordertime;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> total;</span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建OrderMapper接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderMapper</span> </span>&#123;</span><br><span class="line">	<span class="function">List&lt;Order&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置xml文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.lagou.mapper.OrderMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"orderMap"</span> <span class="attr">type</span>=<span class="string">"com.lagou.domain.Order"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"uid"</span> <span class="attr">property</span>=<span class="string">"user.id"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"user.username"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"password"</span> <span class="attr">property</span>=<span class="string">"user.password"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"birthday"</span> <span class="attr">property</span>=<span class="string">"user.birthday"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"orderMap"</span>&gt;</span></span><br><span class="line">    select * from orders o,user u where o.uid=u.id</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"orderMap"</span> <span class="attr">type</span>=<span class="string">"com.lagou.domain.Order"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"ordertime"</span> <span class="attr">column</span>=<span class="string">"ordertime"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"total"</span> <span class="attr">column</span>=<span class="string">"total"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"user"</span> <span class="attr">javaType</span>=<span class="string">"com.lagou.domain.User"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"uid"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"password"</span> <span class="attr">property</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"birthday"</span> <span class="attr">property</span>=<span class="string">"birthday"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="一对多-多对多类似"><a href="#一对多-多对多类似" class="headerlink" title="一对多(多对多类似):"></a>一对多(多对多类似):</h5><p>修改实体</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> Date ordertime;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> total;</span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Order&gt; orderList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建UserMapper接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">	<span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置XML</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.lagou.mapper.UserMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userMap"</span> <span class="attr">type</span>=<span class="string">"com.lagou.domain.User"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"password"</span> <span class="attr">property</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"birthday"</span> <span class="attr">property</span>=<span class="string">"birthday"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"orderList"</span> <span class="attr">ofType</span>=<span class="string">"com.lagou.domain.Order"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"oid"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"ordertime"</span> <span class="attr">property</span>=<span class="string">"ordertime"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"total"</span> <span class="attr">property</span>=<span class="string">"total"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"userMap"</span>&gt;</span></span><br><span class="line">    select *,o.id oid from user u left join orders o on u.id=o.uid</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="mybatis注解开发-代码不做演示"><a href="#mybatis注解开发-代码不做演示" class="headerlink" title="mybatis注解开发(代码不做演示)"></a>mybatis注解开发(代码不做演示)</h3><p>@Insert 新增<br>@Update 更新<br>@Delete 删除<br>@Select 查询<br>@Result 结果映射<br>@Results 与 @Result 封装多个结果集<br>@One 一对一<br>@Many 一堆多或者多对多</p>
<h3 id="mybatis缓存-一级缓存与二级缓存"><a href="#mybatis缓存-一级缓存与二级缓存" class="headerlink" title="mybatis缓存(一级缓存与二级缓存):"></a>mybatis缓存(一级缓存与二级缓存):</h3><p>  存储结构: 一级缓存跟二级缓存底层的数据结构都是hashMap, 其中key是mybatis自己封装的CacheKey是, 生成方式主要由MappedStatement RowBounds(分页相关对象)  BoundSql 构成.  一级缓存的value主要是保存sql查询之后的结果(包括具体的对象), 重复执行玩一次sql,都获取到同一个对象. 二级缓存缓存的是结果的数据(不能具体到对象), 即获取到不同的对象,但是对象的值是相等的. 如果二级缓存配置的是redisCache,则使用到的是redis中的哈希数据结构.</p>
<p>​    范围: 一级缓存是针对同一个sqlSession而言,同一个sqlSession查询的内容,缓存共享.  二级缓存是针对整个namespace, 多个sqlSession共享同一个二级缓存</p>
<p>​    失效场景: 一级缓存和二级缓存每次查询都会进行数据的缓存. 在进行 insert update delet等数据库写操作的时候会清空缓存. 除此之外, 一级缓存,可以手动调用缓存的 clearCache方法清空缓存, 后续有查询操作缓存可以继续使用; 调用 sqlSession.close()方法之后,也会清空缓存,后续缓存不可用.</p>
<h3 id="mybatis插件"><a href="#mybatis插件" class="headerlink" title="mybatis插件:"></a>mybatis插件:</h3><p>  mybatis四大组件(Executor, StatementHandler, ParameterHandler, ResultSetHandler) 允许对其内部的方法进行拦截, mybatis插件的原理就是拦截器对这些对象内部方法进行拦截.</p>
<p>​    具体原理: </p>
<p>在四大组件的对象创建出来后, 每个对象都不是直接返回,而是优先经过interceptorChain.pluginAll(parameterHandler)</p>
<p>获取到所有的拦截器,调用interceptorChain.pluginAll(parameterHandler)</p>
<p>为目标对象利用动态代理创建代理对象; 面向切面的方式,拦截到每一个需要拦截的方法,加入业务逻辑,以达到插件的目的.</p>
<h3 id="mybatis架构原理"><a href="#mybatis架构原理" class="headerlink" title="mybatis架构原理:"></a>mybatis架构原理:</h3><p>分三层:</p>
<p>(1) API接口层:对外提供使用的接口API, 开发人员通过这些API操作数据库. 接口层收到调用请求就会调用数据处理曾来完成数据的处理</p>
<p>Mybatis提供两种方式调用API:</p>
<p>a.使用传统方式(传入namespace.方法id)</p>
<p>b.通过Mapper代理方式(getMapper())</p>
<p>(2) 数据处理层: 复制具体的sql操作, sql解析, sql执行,以及执行结果的映射.</p>
<p>(3) 基础支撑层: 负责最基础的功能支撑,包括连接管理, 事务管理, 配置加载, 缓存处理.</p>
<h5 id="主要构建及其相互关系"><a href="#主要构建及其相互关系" class="headerlink" title="主要构建及其相互关系"></a>主要构建及其相互关系</h5><table>
<thead>
<tr>
<th>组件</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>SqlSession</td>
<td>作为mybatis工作的主要顶层api,表示和数据库交互的会话,完成数据库操作</td>
</tr>
<tr>
<td>Executor</td>
<td>执行器,是调度的核心,负责sql语句的生成和查询缓存</td>
</tr>
<tr>
<td>StatementHandler</td>
<td>封装了JDBC Statement操作,设置参数已经封装结果为list</td>
</tr>
<tr>
<td>ParameterHandler</td>
<td>负责设置参数,被StatementHandler调用</td>
</tr>
<tr>
<td>ResultSetHandler</td>
<td>负责封装结果, 被StatementHandler调用</td>
</tr>
<tr>
<td>TypeHandler</td>
<td>负责数据库类型与java类型映射</td>
</tr>
<tr>
<td>MappedStatement</td>
<td>封装了sql语句的节点</td>
</tr>
<tr>
<td>SqlSource</td>
<td>根据用户传递的parameterObject,动态生成sql语句,将信息封装到BoundSql中</td>
</tr>
<tr>
<td>BoundSql</td>
<td>表示动态生成的sql语句已经相对应的参数信息</td>
</tr>
</tbody></table>
<h5 id="mybatis执行器"><a href="#mybatis执行器" class="headerlink" title="mybatis执行器:"></a>mybatis执行器:</h5><p> 最基本的有三种:</p>
<p>​    SimpleExecutor, ReuseExecutor, BathExecutor</p>
<p>​    严格来讲在mybatis源码中还有 BaseExecutor, CachingExecutor, ClosedExecutor(方法都抛出异常)</p>
<p>​    区别:</p>
<p>​    SimpleExecutor 每执行一次update或select，就开启一个Statement对象，用完立刻关闭Statement对象。</p>
<p>​    ReuseExecutor  执行update或select，以sql作为key查找Statement对象，存在就使用，不存在就创建，用完后，不关闭Statement对象，而是放置于Map内，供下一次使用。简言之，就是重复使用Statement对象。</p>
<p>​    BathExecutor   执行update（没有select，JDBC批处理不支持select），将所有sql都添加到批处理中（addBatch()），等待统一执行（executeBatch()），它缓存了多个Statement对象，每个Statement对象都是addBatch()完毕后，等待逐一执行executeBatch()批处理。与JDBC批处理相同。</p>
<h5 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载:"></a>懒加载:</h5><p> 仅支持association关联对象和collection关联集合对象的延迟加载，association指的就是一对一，collection指的就是一对多查询。</p>
<p>​    原理: 使用CGLIB动态代理,当调用目标方法时,实际上调用的是动态代理对象的invoke方法, 在法相目标方法返回的是null值,那么久会单独执行一次事先保存好的关联相对应对象的sql,将执行结果按照配置文件设置到对一个的字段上,接着完成 相对应的逻辑.</p>
]]></content>
  </entry>
</search>
