<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>RESTful API设计</title>
    <url>/blog/2020/05/05/RESTful%20API%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<h1 id="RESTful-API设计"><a href="#RESTful-API设计" class="headerlink" title="RESTful API设计"></a>RESTful API设计</h1><ul>
<li><p>rest⻛格请求是什么样的？</p>
</li>
<li><p>SpringMVC对rest⻛格请求到底提供了怎样的⽀持<br>是⼀个注解的使⽤@PathVariable，可以帮助我们从uri中取出参数</p>
</li>
</ul>
<h2 id="什么是-RESTful"><a href="#什么是-RESTful" class="headerlink" title="什么是 RESTful"></a>什么是 RESTful</h2><p>Restful 是⼀种 web 软件架构⻛格，它不是标准也不是协议，它倡导的是⼀个资源定位及资源操作的⻛<br>格。</p>
<h3 id="什么是REST"><a href="#什么是REST" class="headerlink" title="什么是REST"></a>什么是REST</h3><p>REST（英⽂：Representational State Transfer，简称 REST）描述了⼀个架构样式的⽹络系统， ⽐如<br>web 应⽤程序。它⾸次出现在 2000 年 Roy Fielding 的博⼠论⽂中，他是 HTTP 规范的主要编写者之<br>⼀。在⽬前主流的三种 Web 服务交互⽅案中，REST 相⽐于 SOAP（Simple Object Access protocol，<br>简单对象访问协议）以及 XML-RPC 更加简单明了，⽆论是对 URL 的处理还是对 Payload 的编码，<br>REST 都倾向于⽤更加简单轻量的⽅法设计和实现。值得注意的是 REST 并没有⼀个明确的标准，⽽更像<br>是⼀种设计的⻛格。<br>它本身并没有什么实⽤性，其核⼼价值在于如何设计出符合 REST ⻛格的⽹络接⼝。<br>资源 表现层 状态转移</p>
<h3 id="Restful-的优点"><a href="#Restful-的优点" class="headerlink" title="Restful 的优点"></a>Restful 的优点</h3><p>它结构清晰、符合标准、易于理解、扩展⽅便，所以正得到越来越多⽹站的采⽤。</p>
<h3 id="Restful-的特性"><a href="#Restful-的特性" class="headerlink" title="Restful 的特性"></a>Restful 的特性</h3><ul>
<li>资源（Resources）：⽹络上的⼀个实体，或者说是⽹络上的⼀个具体信息。<br>它可以是⼀段⽂本、⼀张图⽚、⼀⾸歌曲、⼀种服务，总之就是⼀个具体的存在。可以⽤⼀个 URI（统<br>⼀资源定位符）指向它，每种资源对应⼀个特定的 URI 。要获取这个资源，访问它的 URI 就可以，因此<br>URI 即为每⼀个资源的独⼀⽆⼆的识别符。</li>
<li>表现层（Representation）：把资源具体呈现出来的形式，叫做它的表现层 （Representation）。⽐<br>如，⽂本可以⽤ txt 格式表现，也可以⽤ HTML 格式、XML 格式、JSON 格式表现，甚⾄可以采⽤⼆进<br>制格式。</li>
<li>状态转化（State Transfer）：每发出⼀个请求，就代表了客户端和服务器的⼀次交互过程。<br>HTTP 协议，是⼀个⽆状态协议，即所有的状态都保存在服务器端。因此，如果客户端想要操作服务<br>器， 必须通过某种⼿段，让服务器端发⽣“状态转化”（State Transfer）。⽽这种转化是建⽴在表现层<br>之上的，所以就是 “ 表现层状态转化” 。具体说， 就是 HTTP 协议⾥⾯，四个表示操作⽅式的动词：<br>GET 、POST 、PUT 、DELETE 。它们分别对应四种基本操作：GET ⽤来获取资源，POST ⽤来新建资<br>源，PUT ⽤来更新资源，DELETE ⽤来删除资源。</li>
</ul>
<h3 id="RESTful-的示例"><a href="#RESTful-的示例" class="headerlink" title="RESTful 的示例"></a>RESTful 的示例</h3><ul>
<li><p>rest是⼀个url请求的⻛格，基于这种⻛格设计请求的url<br>没有rest的话，原有的url设计<a href="http://localhost:8080/user/queryUserById.action?id=3" target="_blank" rel="noopener">http://localhost:8080/user/queryUserById.action?id=3</a> url中定义了动作（操作），参数具体锁定到操作的是谁</p>
</li>
<li><p>有了rest⻛格之后<br>rest中，认为互联⽹中的所有东⻄都是资源，既然是资源就会有⼀个唯⼀的uri标识它，代表它<a href="http://localhost:8080/user/3" target="_blank" rel="noopener">http://localhost:8080/user/3</a> 代表的是id为3的那个⽤户记录（资源）锁定资源之后如何操作它呢？常规操作就是增删改查 根据请求⽅式不同，代表要做不同的操作</p>
</li>
<li><p>get 查询，获取资源</p>
</li>
<li><p>post 增加，新建资源</p>
</li>
<li><p>put 更新</p>
</li>
<li><p>delete 删除资源</p>
</li>
<li><p>rest⻛格带来的直观体现：就是传递参数⽅式的变化，参数可以在uri中了</p>
<p>/account/1 HTTP GET ：得到 id = 1 的 account<br>/account/1 HTTP DELETE：删除 id = 1 的 account<br>/account/1 HTTP PUT：更新 id = 1 的 account<br>URL：资源定位符，通过URL地址去定位互联⽹中的资源（抽象的概念，⽐如图⽚、视频、app服务<br>等）。</p>
<p><strong>RESTful ⻛格 URL</strong>：互联⽹所有的事物都是资源，要求URL中只有表示资源的名称，没有动词。<br><strong>RESTful⻛格资源操作</strong>：使⽤HTTP请求中的method⽅法put、delete、post、get来操作资源。分别对<br>应添加、删除、修改、查询。不过⼀般使⽤时还是 post 和 get。put 和 delete⼏乎不使⽤。<br><strong>RESTful ⻛格资源表述</strong>：可以根据需求对URL定位的资源返回不同的表述（也就是返回数据类型，⽐如<br>XML、JSON等数据格式）。</p>
<p>Spring MVC ⽀持 RESTful ⻛格请求，具体讲的就是使⽤ @PathVariable 注解获取 RESTful ⻛格的请求<br>URL中的路径变量。</p>
</li>
</ul>
<h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><ul>
<li><p>前端jsp</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>SpringMVC对Restful⻛格url的⽀持<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>测试⽤例：SpringMVC对Restful⻛格url的⽀持<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/demo/handle/15"</span>&gt;</span>rest_get测试<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"/demo/handle"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交rest_post请求"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"/demo/handle/15/lisi"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"_method"</span> <span class="attr">value</span>=<span class="string">"put"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交rest_put请求"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"/demo/handle/15"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"_method"</span> <span class="attr">value</span>=<span class="string">"delete"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交rest_delete请求"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>后台Handler方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* restful get /demo/handle/15</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/handle/&#123;id&#125;"</span>,method =&#123;RequestMethod.GET&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleGet</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id) </span>&#123;</span><br><span class="line">    Date date = <span class="keyword">new</span> Date();</span><br><span class="line">    ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">    modelAndView.addObject(<span class="string">"date"</span>,date);</span><br><span class="line">    modelAndView.setViewName(<span class="string">"success"</span>);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* restful post /demo/handle</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/handle"</span>,method = &#123;RequestMethod.POST&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handlePost</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">    Date date = <span class="keyword">new</span> Date();</span><br><span class="line">    ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">    modelAndView.addObject(<span class="string">"date"</span>,date);</span><br><span class="line">    modelAndView.setViewName(<span class="string">"success"</span>);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* restful put /demo/handle/15/lisi</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/handle/&#123;id&#125;/&#123;name&#125;"</span>,method =&#123;RequestMethod.PUT&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handlePut</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer</span></span><br><span class="line"><span class="function">    id,@<span class="title">PathVariable</span><span class="params">(<span class="string">"name"</span>)</span> String username) </span>&#123;</span><br><span class="line">    Date date = <span class="keyword">new</span> Date();</span><br><span class="line">    ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">    modelAndView.addObject(<span class="string">"date"</span>,date);</span><br><span class="line">    modelAndView.setViewName(<span class="string">"success"</span>);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* restful delete /demo/handle/15</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/handle/&#123;id&#125;"</span>,method =&#123;RequestMethod.DELETE&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleDelete</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id) </span>&#123;</span><br><span class="line">    Date date = <span class="keyword">new</span> Date();</span><br><span class="line">    ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">    modelAndView.addObject(<span class="string">"date"</span>,date);</span><br><span class="line">    modelAndView.setViewName(<span class="string">"success"</span>);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>web.xml中配置请求⽅式过滤器（将特定的post请求转换为put和delete请求）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置springmvc请求⽅式转换过滤器，会检查请求参数中是否有_method参数，如果有就</span></span><br><span class="line"><span class="comment">按照指定的请求⽅式进⾏转换--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>hiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>hiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>







</li>
</ul>
]]></content>
      <categories>
        <category>程序设计</category>
      </categories>
      <tags>
        <tag>api</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis总结</title>
    <url>/blog/2020/05/01/Mybatis%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="mybatis学习笔记"><a href="#mybatis学习笔记" class="headerlink" title="mybatis学习笔记"></a>mybatis学习笔记</h1><h3 id="mybatis解决JDBC的问题"><a href="#mybatis解决JDBC的问题" class="headerlink" title="mybatis解决JDBC的问题:"></a>mybatis解决JDBC的问题:</h3><p>1.数据库连接创建, 释放频繁造成系统资源的浪费</p>
<p>2.sql语句在代码中硬编码, 造成代码不易维护, 实际使用中sql变化比较大, 改变sql需要改变java代码.</p>
<p>3.使用preparedStatement向有占位符传参存在硬编码</p>
<p>4.对结果集封装也存在硬编码.</p>
<p>解决: mybatis 提供连接池, 通过配置文件解决硬编码,  通过反射内省自动封装结果集</p>
<h3 id="自定义框架设计"><a href="#自定义框架设计" class="headerlink" title="自定义框架设计:"></a>自定义框架设计:</h3><h5 id="大概流程"><a href="#大概流程" class="headerlink" title="大概流程:"></a>大概流程:</h5><p>1.加载xml配置文件,封装成configuration对象(封装了数据库连接池的相关信息,以及所有配置文件的信息)</p>
<p>2.将配置文件中,以namespace.statementId为唯一表示,存放到map中,value为具体需要执行的,自己封装的mappedStatement(封装了数据库的连接)</p>
<p>3.在执行相对应的方法,通过传入的namespace.statementId获取对应的mappedStatement,注册驱动,获取连接,解析sql,填充参数,最后执行. 或者使用mapper的动态代理对象,直接调用相对应的方法执行.这里需要满足statementId与接口的方法名相同</p>
<h5 id="框架核心所运用的设计模式"><a href="#框架核心所运用的设计模式" class="headerlink" title="框架核心所运用的设计模式:"></a>框架核心所运用的设计模式:</h5><p>构建者设计模式( 当一个复杂对象在初始化过于复杂时,我们使用该设计模式,一步一步构建小对象,最后构成复杂对象)</p>
<p>工厂设计模式(创建对象的工作在工厂方法代码里面,根据传入参数的不同,获取不通的对象)</p>
<p>代理模式(对象的方法执行由代理对象完成)</p>
<p>JDK动态代理:由代理模式衍生出来. 需要满足, 代理的对象实现了接口. 最终生成的代理对象,每次执行方法,都会去调用invoke(),这样就可以在方法执行前后,我们对方法进行增长.</p>
<h3 id="mybatis动态sql"><a href="#mybatis动态sql" class="headerlink" title="mybatis动态sql:"></a>mybatis动态sql:</h3><p> mybatis动态sql是当我们的业务逻辑比较复杂时,需要将sql动态变化,根据我们传入的实体类或者参数,使用不同的sql语言进行查询.</p>
<p>​    动态sql: </p>
<ol>
<li><p>if 语句 (简单的条件判断)</p>
</li>
<li><p>choose(when, otherwize)</p>
</li>
<li><p>trim (对包含的内容加上 prefix,或者 suffix 等，前缀，后缀)</p>
</li>
<li><p>where (主要是用来简化sql语句中where条件判断的，能智能的处理 and or )</p>
</li>
<li><p>set (用于update)</p>
</li>
<li><p>foreach (用于 in语句)</p>
<p>原理:</p>
<p>mybatis将xml的sql语句封装成一个个节点,每个节点都是一种动态sql类型的描述,例如  IfSqlNode, 每个动态sql有多个SqlNode构成,都需要实现内部定义的抽象方法apply(), 在sql执行的时候, 这个apply方法会依次执行子节点的apply(), 这样递归执行下去, 构建动态sql中prepareStatement的参数, 并保存最终生成sql的StringBuilder对象. 最终执行 sql</p>
</li>
</ol>
<h3 id="mybatis映射"><a href="#mybatis映射" class="headerlink" title="mybatis映射:"></a>mybatis映射:</h3><h5 id="一对一"><a href="#一对一" class="headerlink" title="一对一:"></a>一对一:</h5><p>创建映射实体类:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> Date ordertime;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> total;</span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建OrderMapper接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderMapper</span> </span>&#123;</span><br><span class="line">	<span class="function">List&lt;Order&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置xml文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.lagou.mapper.OrderMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"orderMap"</span> <span class="attr">type</span>=<span class="string">"com.lagou.domain.Order"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"uid"</span> <span class="attr">property</span>=<span class="string">"user.id"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"user.username"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"password"</span> <span class="attr">property</span>=<span class="string">"user.password"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"birthday"</span> <span class="attr">property</span>=<span class="string">"user.birthday"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"orderMap"</span>&gt;</span></span><br><span class="line">    select * from orders o,user u where o.uid=u.id</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"orderMap"</span> <span class="attr">type</span>=<span class="string">"com.lagou.domain.Order"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"ordertime"</span> <span class="attr">column</span>=<span class="string">"ordertime"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"total"</span> <span class="attr">column</span>=<span class="string">"total"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"user"</span> <span class="attr">javaType</span>=<span class="string">"com.lagou.domain.User"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"uid"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"password"</span> <span class="attr">property</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"birthday"</span> <span class="attr">property</span>=<span class="string">"birthday"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="一对多-多对多类似"><a href="#一对多-多对多类似" class="headerlink" title="一对多(多对多类似):"></a>一对多(多对多类似):</h5><p>修改实体</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> Date ordertime;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> total;</span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Order&gt; orderList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建UserMapper接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">	<span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置XML</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.lagou.mapper.UserMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userMap"</span> <span class="attr">type</span>=<span class="string">"com.lagou.domain.User"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"password"</span> <span class="attr">property</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"birthday"</span> <span class="attr">property</span>=<span class="string">"birthday"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"orderList"</span> <span class="attr">ofType</span>=<span class="string">"com.lagou.domain.Order"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"oid"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"ordertime"</span> <span class="attr">property</span>=<span class="string">"ordertime"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"total"</span> <span class="attr">property</span>=<span class="string">"total"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"userMap"</span>&gt;</span></span><br><span class="line">    select *,o.id oid from user u left join orders o on u.id=o.uid</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="mybatis注解开发-代码不做演示"><a href="#mybatis注解开发-代码不做演示" class="headerlink" title="mybatis注解开发(代码不做演示)"></a>mybatis注解开发(代码不做演示)</h3><p>@Insert 新增<br>@Update 更新<br>@Delete 删除<br>@Select 查询<br>@Result 结果映射<br>@Results 与 @Result 封装多个结果集<br>@One 一对一<br>@Many 一堆多或者多对多</p>
<h3 id="mybatis缓存-一级缓存与二级缓存"><a href="#mybatis缓存-一级缓存与二级缓存" class="headerlink" title="mybatis缓存(一级缓存与二级缓存):"></a>mybatis缓存(一级缓存与二级缓存):</h3><p>  存储结构: 一级缓存跟二级缓存底层的数据结构都是hashMap, 其中key是mybatis自己封装的CacheKey是, 生成方式主要由MappedStatement RowBounds(分页相关对象)  BoundSql 构成.  一级缓存的value主要是保存sql查询之后的结果(包括具体的对象), 重复执行玩一次sql,都获取到同一个对象. 二级缓存缓存的是结果的数据(不能具体到对象), 即获取到不同的对象,但是对象的值是相等的. 如果二级缓存配置的是redisCache,则使用到的是redis中的哈希数据结构.</p>
<p>​    范围: 一级缓存是针对同一个sqlSession而言,同一个sqlSession查询的内容,缓存共享.  二级缓存是针对整个namespace, 多个sqlSession共享同一个二级缓存</p>
<p>​    失效场景: 一级缓存和二级缓存每次查询都会进行数据的缓存. 在进行 insert update delet等数据库写操作的时候会清空缓存. 除此之外, 一级缓存,可以手动调用缓存的 clearCache方法清空缓存, 后续有查询操作缓存可以继续使用; 调用 sqlSession.close()方法之后,也会清空缓存,后续缓存不可用.</p>
<h3 id="mybatis插件"><a href="#mybatis插件" class="headerlink" title="mybatis插件:"></a>mybatis插件:</h3><p>  mybatis四大组件(Executor, StatementHandler, ParameterHandler, ResultSetHandler) 允许对其内部的方法进行拦截, mybatis插件的原理就是拦截器对这些对象内部方法进行拦截.</p>
<p>​    具体原理: </p>
<p>在四大组件的对象创建出来后, 每个对象都不是直接返回,而是优先经过interceptorChain.pluginAll(parameterHandler)</p>
<p>获取到所有的拦截器,调用interceptorChain.pluginAll(parameterHandler)</p>
<p>为目标对象利用动态代理创建代理对象; 面向切面的方式,拦截到每一个需要拦截的方法,加入业务逻辑,以达到插件的目的.</p>
<h3 id="mybatis架构原理"><a href="#mybatis架构原理" class="headerlink" title="mybatis架构原理:"></a>mybatis架构原理:</h3><p>分三层:</p>
<p>(1) API接口层:对外提供使用的接口API, 开发人员通过这些API操作数据库. 接口层收到调用请求就会调用数据处理曾来完成数据的处理</p>
<p>Mybatis提供两种方式调用API:</p>
<p>a.使用传统方式(传入namespace.方法id)</p>
<p>b.通过Mapper代理方式(getMapper())</p>
<p>(2) 数据处理层: 复制具体的sql操作, sql解析, sql执行,以及执行结果的映射.</p>
<p>(3) 基础支撑层: 负责最基础的功能支撑,包括连接管理, 事务管理, 配置加载, 缓存处理.</p>
<h5 id="主要构建及其相互关系"><a href="#主要构建及其相互关系" class="headerlink" title="主要构建及其相互关系"></a>主要构建及其相互关系</h5><table>
<thead>
<tr>
<th>组件</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>SqlSession</td>
<td>作为mybatis工作的主要顶层api,表示和数据库交互的会话,完成数据库操作</td>
</tr>
<tr>
<td>Executor</td>
<td>执行器,是调度的核心,负责sql语句的生成和查询缓存</td>
</tr>
<tr>
<td>StatementHandler</td>
<td>封装了JDBC Statement操作,设置参数已经封装结果为list</td>
</tr>
<tr>
<td>ParameterHandler</td>
<td>负责设置参数,被StatementHandler调用</td>
</tr>
<tr>
<td>ResultSetHandler</td>
<td>负责封装结果, 被StatementHandler调用</td>
</tr>
<tr>
<td>TypeHandler</td>
<td>负责数据库类型与java类型映射</td>
</tr>
<tr>
<td>MappedStatement</td>
<td>封装了sql语句的节点</td>
</tr>
<tr>
<td>SqlSource</td>
<td>根据用户传递的parameterObject,动态生成sql语句,将信息封装到BoundSql中</td>
</tr>
<tr>
<td>BoundSql</td>
<td>表示动态生成的sql语句已经相对应的参数信息</td>
</tr>
</tbody></table>
<h5 id="mybatis执行器"><a href="#mybatis执行器" class="headerlink" title="mybatis执行器:"></a>mybatis执行器:</h5><p> 最基本的有三种:</p>
<p>​    SimpleExecutor, ReuseExecutor, BathExecutor</p>
<p>​    严格来讲在mybatis源码中还有 BaseExecutor, CachingExecutor, ClosedExecutor(方法都抛出异常)</p>
<p>​    区别:</p>
<p>​    SimpleExecutor 每执行一次update或select，就开启一个Statement对象，用完立刻关闭Statement对象。</p>
<p>​    ReuseExecutor  执行update或select，以sql作为key查找Statement对象，存在就使用，不存在就创建，用完后，不关闭Statement对象，而是放置于Map内，供下一次使用。简言之，就是重复使用Statement对象。</p>
<p>​    BathExecutor   执行update（没有select，JDBC批处理不支持select），将所有sql都添加到批处理中（addBatch()），等待统一执行（executeBatch()），它缓存了多个Statement对象，每个Statement对象都是addBatch()完毕后，等待逐一执行executeBatch()批处理。与JDBC批处理相同。</p>
<h5 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载:"></a>懒加载:</h5><p> 仅支持association关联对象和collection关联集合对象的延迟加载，association指的就是一对一，collection指的就是一对多查询。</p>
<p>​    原理: 使用CGLIB动态代理,当调用目标方法时,实际上调用的是动态代理对象的invoke方法, 在法相目标方法返回的是null值,那么久会单独执行一次事先保存好的关联相对应对象的sql,将执行结果按照配置文件设置到对一个的字段上,接着完成 相对应的逻辑.</p>
]]></content>
      <categories>
        <category>框架</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
        <tag>jdbc</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql优化</title>
    <url>/blog/2020/05/09/Mysql%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h1 id="Mysql优化"><a href="#Mysql优化" class="headerlink" title="Mysql优化"></a>Mysql优化</h1><h2 id="Mysql性能"><a href="#Mysql性能" class="headerlink" title="Mysql性能"></a>Mysql性能</h2><h3 id="最大数据量"><a href="#最大数据量" class="headerlink" title="最大数据量"></a>最大数据量</h3><p>抛开数据量和并发数，谈性能都是耍流氓。MySQL没有限制单表最大记录数，它取决于操作系统对文件大小的限制。</p>
<table>
<thead>
<tr>
<th>文件系统</th>
<th>单文件大小限制</th>
</tr>
</thead>
<tbody><tr>
<td>FAT32</td>
<td>4G</td>
</tr>
<tr>
<td>NTFS</td>
<td>64G</td>
</tr>
<tr>
<td>NTFS5.0</td>
<td>2TB</td>
</tr>
<tr>
<td>EXT2</td>
<td>块大小1024字节,文件最大容量16G;块大小4096字节,文件最大容量2TB</td>
</tr>
<tr>
<td>EXT3</td>
<td>块大小4k,文件最大容量4TB</td>
</tr>
<tr>
<td>EXT4</td>
<td>大于16TB</td>
</tr>
</tbody></table>
<p>《阿里巴巴Java开发手册》提出单表行数超过500万行或者单表容量超过2GB，才推荐分库分表。性能由综合因素决定，抛开业务复杂度，影响程度依次是硬件配置、MySQL配置、数据表设计、索引优化。500万这个值仅供参考，并非铁律。微信搜索web_resource 关注获取更多推送。</p>
<p>博主曾经操作过超过4亿行数据的单表，分页查询最新的20条记录耗时0.6秒，SQL语句大致是<code>select field_1,field_2 from table where id &lt; #{prePageMinId} order by id desc limit 20</code>，prePageMinId是上一页数据记录的最小ID。</p>
<p>虽然当时查询速度还凑合，随着数据不断增长，有朝一日必定不堪重负。分库分表是个周期长而风险高的大活儿，应该尽可能在当前结构上优化，比如升级硬件、迁移历史数据等等，实在没辙了再分。对分库分表感兴趣的同学可以阅读分库分表的基本思想。</p>
<h3 id="最大并发数"><a href="#最大并发数" class="headerlink" title="最大并发数"></a><strong>最大并发数</strong></h3><p>并发数是指同一时刻数据库能处理多少个请求，由max_connections和max_user_connections决定。max_connections是指MySQL实例的最大连接数，上限值是16384，max_user_connections是指每个数据库用户的最大连接数。</p>
<p>MySQL会为每个连接提供缓冲区，意味着消耗更多的内存。如果连接数设置太高硬件吃不消，太低又不能充分利用硬件。一般要求两者比值超过10%，计算方法如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">max_used_connections / max_connections * 100% = 3/100 *100% ≈ 3%</span><br></pre></td></tr></table></figure>

<p>查看最大连接数与响应最大连接数：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">show variables like '%max_connections%';</span><br><span class="line">show variables like '%max_user_connections%';</span><br></pre></td></tr></table></figure>

<p>在配置文件my.cnf中修改最大连接数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">max_connections = 100</span><br><span class="line">max_used_connections = 20</span><br></pre></td></tr></table></figure>

<h3 id="查询耗时0-5秒"><a href="#查询耗时0-5秒" class="headerlink" title="查询耗时0.5秒"></a><strong>查询耗时0.5秒</strong></h3><p>建议将单次查询耗时控制在0.5秒以内，0.5秒是个经验值，源于用户体验的3秒原则。如果用户的操作3秒内没有响应，将会厌烦甚至退出。响应时间=客户端UI渲染耗时+网络请求耗时+应用程序处理耗时+查询数据库耗时，0.5秒就是留给数据库1/6的处理时间。</p>
<h3 id="实施原则"><a href="#实施原则" class="headerlink" title="实施原则"></a><strong>实施原则</strong></h3><p>相比NoSQL数据库，MySQL是个娇气脆弱的家伙。它就像体育课上的女同学，一点纠纷就和同学闹别扭(扩容难)，跑两步就气喘吁吁(容量小并发低)，常常身体不适要请假(SQL约束太多)。如今大家都会搞点分布式，应用程序扩容比数据库要容易得多，所以实施原则是<strong>数据库少干活，应用程序多干活</strong>。</p>
<ul>
<li>充分利用但不滥用索引，须知索引也消耗磁盘和CPU。</li>
<li>不推荐使用数据库函数格式化数据，交给应用程序处理。</li>
<li>不推荐使用外键约束，用应用程序保证数据准确性。</li>
<li>写多读少的场景，不推荐使用唯一索引，用应用程序保证唯一性。</li>
<li>适当冗余字段，尝试创建中间表，用应用程序计算中间结果，用空间换时间。</li>
<li>不允许执行极度耗时的事务，配合应用程序拆分成更小的事务。</li>
<li>预估重要数据表（比如订单表）的负载和数据增长态势，提前优化。</li>
</ul>
<h2 id="数据表设计"><a href="#数据表设计" class="headerlink" title="数据表设计"></a><strong>数据表设计</strong></h2><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a><strong>数据类型</strong></h3><p>数据类型的选择原则：更简单或者占用空间更小。</p>
<ul>
<li><p>如果长度能够满足，整型尽量使用tinyint、smallint、medium_int而非int。</p>
</li>
<li><p>如果字符串长度确定，采用char类型。</p>
</li>
<li><p>如果varchar能够满足，不采用text类型。</p>
</li>
<li><p>精度要求较高的使用decimal类型，也可以使用BIGINT，比如精确两位小数就乘以100后保存。</p>
</li>
<li><p>尽量采用timestamp而非datetime。</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>占用字节</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>datetime</td>
<td>8字节</td>
<td>‘1000-01-01 00:00: 00.000000’ to ‘9999-12-31 23:59:59.999999’</td>
</tr>
<tr>
<td>timestamp</td>
<td>4字节</td>
<td>‘1970-01-01 00:00:00.000000’ to ‘2038-01-19 03:14:07.999999’</td>
</tr>
</tbody></table>
</li>
</ul>
<p>相比datetime，timestamp占用更少的空间，以UTC的格式储存自动转换时区。</p>
<h3 id="避免空值"><a href="#避免空值" class="headerlink" title="避免空值"></a><strong>避免空值</strong></h3><p>MySQL中字段为NULL时依然占用空间，会使索引、索引统计更加复杂。从NULL值更新到非NULL无法做到原地更新，容易发生索引分裂影响性能。尽可能将NULL值用有意义的值代替，也能避免SQL语句里面包含is not null的判断。微信搜索web_resource 关注获取更多推送。微信搜索web_resource 关注获取更多推送。</p>
<h3 id="text类型优化"><a href="#text类型优化" class="headerlink" title="text类型优化"></a><strong>text类型优化</strong></h3><p>由于text字段储存大量数据，表容量会很早涨上去，影响其他字段的查询性能。建议抽取出来放在子表里，用业务主键关联。</p>
<h2 id="索引优化"><a href="#索引优化" class="headerlink" title="索引优化"></a><strong>索引优化</strong></h2><h3 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a><strong>索引分类</strong></h3><ul>
<li>普通索引：最基本的索引。</li>
<li>组合索引：多个字段上建立的索引，能够加速复合查询条件的检索。</li>
<li>唯一索引：与普通索引类似，但索引列的值必须唯一，允许有空值。</li>
<li>组合唯一索引：列值的组合必须唯一。</li>
<li>主键索引：特殊的唯一索引，用于唯一标识数据表中的某一条记录，不允许有空值，一般用primary key约束。</li>
<li>全文索引：用于海量文本的查询，MySQL5.6之后的InnoDB和MyISAM均支持全文索引。由于查询精度以及扩展性不佳，更多的企业选择Elasticsearch。</li>
</ul>
<h3 id="索引优化-1"><a href="#索引优化-1" class="headerlink" title="索引优化"></a><strong>索引优化</strong></h3><ul>
<li>分页查询很重要，如果查询数据量超过30%，MYSQL不会使用索引。</li>
<li>单表索引数不超过5个、单个索引字段数不超过5个。</li>
<li>字符串可使用前缀索引，前缀长度控制在5-8个字符。</li>
<li>字段唯一性太低，增加索引没有意义，如：是否删除、性别。</li>
</ul>
<p>合理使用覆盖索引，如下所示：</p>
<ul>
<li><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> login_name, nick_name <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">where</span> login_name = ?</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>login_name, nick_name两个字段建立组合索引，比login_name简单索引要更快。</p>
<h2 id="SQL优化"><a href="#SQL优化" class="headerlink" title="SQL优化"></a><strong>SQL优化</strong></h2><h3 id="分批处理"><a href="#分批处理" class="headerlink" title="分批处理"></a><strong>分批处理</strong></h3><p>博主小时候看到鱼塘挖开小口子放水，水面有各种漂浮物。浮萍和树叶总能顺利通过出水口，而树枝会挡住其他物体通过，有时还会卡住，需要人工清理。MySQL就是鱼塘，最大并发数和网络带宽就是出水口，用户SQL就是漂浮物。微信搜索web_resource 关注获取更多推送。</p>
<p>不带分页参数的查询或者影响大量数据的update和delete操作，都是树枝，我们要把它打散分批处理，举例说明：</p>
<p>业务描述：更新用户所有已过期的优惠券为不可用状态。</p>
<p>SQL语句：</p>
<ul>
<li><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> <span class="keyword">status</span>=<span class="number">0</span> <span class="keyword">FROM</span> <span class="string">`coupon`</span> <span class="keyword">WHERE</span> expire_date &lt;= <span class="comment">#&#123;currentDate&#125; and status=1;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>如果大量优惠券需要更新为不可用状态，执行这条SQL可能会堵死其他SQL，分批处理伪代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> pageNo = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> PAGE_SIZE = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;   </span><br><span class="line">	List&lt;Integer&gt; batchIdList =queryList(<span class="string">'select id FROM `coupon` WHERE expire_date &lt;= #&#123;currentDate&#125; and status = 1 limit #&#123;(pageNo-1) * PAGE_SIZE&#125;,#&#123;PAGE_SIZE&#125;'</span>); </span><br><span class="line">   <span class="keyword">if</span>(CollectionUtils.isEmpty(batchIdList)) &#123;</span><br><span class="line">   		<span class="keyword">return</span>; </span><br><span class="line">   &#125;</span><br><span class="line">   update(<span class="string">'update status = 0 FROM `coupon` where status = 1 and id in #&#123;batchIdList&#125;'</span>)    	 pageNo ++;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h3 id="操作符-lt-gt-优化"><a href="#操作符-lt-gt-优化" class="headerlink" title="操作符&lt;&gt;优化"></a><strong>操作符&lt;&gt;优化</strong></h3><p>通常&lt;&gt;操作符无法使用索引，举例如下，查询金额不为100元的订单：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> orders <span class="keyword">where</span> amount != <span class="number">100</span>;</span><br></pre></td></tr></table></figure>

<p>如果金额为100的订单极少，这种数据分布严重不均的情况下，有可能使用索引。鉴于这种不确定性，采用union聚合搜索结果，改写方法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> orders <span class="keyword">where</span> amount &gt; <span class="number">100</span>) <span class="keyword">union</span> <span class="keyword">all</span>(<span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> orders <span class="keyword">where</span> amount &lt; <span class="number">100</span> <span class="keyword">and</span> amount &gt; <span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<h3 id="OR优化"><a href="#OR优化" class="headerlink" title="OR优化"></a><strong>OR优化</strong></h3><p>在Innodb引擎下or无法使用组合索引，比如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>，product_name <span class="keyword">from</span> orders <span class="keyword">where</span> mobile_no = <span class="string">'13421800407'</span> <span class="keyword">or</span> user_id = <span class="number">100</span>;</span><br></pre></td></tr></table></figure>

<p>OR无法命中mobile_no + user_id的组合索引，可采用union，如下所示：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">select</span> <span class="keyword">id</span>，product_name <span class="keyword">from</span> orders <span class="keyword">where</span> mobile_no = <span class="string">'13421800407'</span>) <span class="keyword">union</span>(<span class="keyword">select</span> <span class="keyword">id</span>，product_name <span class="keyword">from</span> orders <span class="keyword">where</span> user_id = <span class="number">100</span>);</span><br></pre></td></tr></table></figure>

<p>此时id和product_name字段都有索引，查询才最高效。</p>
<h3 id="IN优化"><a href="#IN优化" class="headerlink" title="IN优化"></a><strong>IN优化</strong></h3><p>IN适合主表大子表小，EXIST适合主表小子表大。由于查询优化器的不断升级，很多场景这两者性能差不多一样了。</p>
<p>尝试改为join查询，举例如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> orders <span class="keyword">where</span> user_id <span class="keyword">in</span> (<span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">level</span> = <span class="string">'VIP'</span>);</span><br></pre></td></tr></table></figure>

<p>采用JOIN如下所示：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> o.id <span class="keyword">from</span> orders o <span class="keyword">left</span> <span class="keyword">join</span> <span class="keyword">user</span> u <span class="keyword">on</span> o.user_id = u.id <span class="keyword">where</span> u.level = <span class="string">'VIP'</span>;</span><br></pre></td></tr></table></figure>

<p>不做列运算</p>
<p>通常在查询条件列运算会导致索引失效，如下所示：</p>
<p>查询当日订单</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> <span class="keyword">order</span> <span class="keyword">where</span> <span class="keyword">date_format</span>(create_time，<span class="string">'%Y-%m-%d'</span>) = <span class="string">'2019-07-01'</span>;</span><br></pre></td></tr></table></figure>

<p>date_format函数会导致这个查询无法使用索引，改写后：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> <span class="keyword">order</span> <span class="keyword">where</span> create_time <span class="keyword">between</span> <span class="string">'2019-07-01 00:00:00'</span> <span class="keyword">and</span> <span class="string">'2019-07-01 23:59:59'</span>;</span><br></pre></td></tr></table></figure>

<h3 id="避免Select-all"><a href="#避免Select-all" class="headerlink" title="避免Select all"></a><strong>避免Select all</strong></h3><p>如果不查询表中所有的列，避免使用SELECT *，它会进行全表扫描，不能有效利用索引。</p>
<h3 id="Like优化"><a href="#Like优化" class="headerlink" title="Like优化"></a><strong>Like优化</strong></h3><p>like用于模糊查询，举个例子（field已建立索引）：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">column</span> <span class="keyword">FROM</span> <span class="keyword">table</span> <span class="keyword">WHERE</span> <span class="keyword">field</span> <span class="keyword">like</span> <span class="string">'%keyword%'</span>;</span><br></pre></td></tr></table></figure>

<p>这个查询未命中索引，换成下面的写法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">column</span> <span class="keyword">FROM</span> <span class="keyword">table</span> <span class="keyword">WHERE</span> <span class="keyword">field</span> <span class="keyword">like</span> <span class="string">'keyword%'</span>;</span><br></pre></td></tr></table></figure>

<p>去除了前面的%查询将会命中索引，但是产品经理一定要前后模糊匹配呢？全文索引fulltext可以尝试一下，但Elasticsearch才是终极武器。</p>
<h3 id="Join优化"><a href="#Join优化" class="headerlink" title="Join优化"></a><strong>Join优化</strong></h3><p>join的实现是采用Nested Loop Join算法，就是通过驱动表的结果集作为基础数据，通过该结数据作为过滤条件到下一个表中循环查询数据，然后合并结果。如果有多个join，则将前面的结果集作为循环数据，再次到后一个表中查询数据。</p>
<p>驱动表和被驱动表尽可能增加查询条件，满足ON的条件而少用Where，用小结果集驱动大结果集。</p>
<p>被驱动表的join字段上加上索引，无法建立索引的时候，设置足够的Join Buffer Size。</p>
<p>禁止join连接三个以上的表，尝试增加冗余字段。微信搜索web_resource 关注获取更多推送。</p>
<h3 id="Limit优化"><a href="#Limit优化" class="headerlink" title="Limit优化"></a><strong>Limit优化</strong></h3><p>limit用于分页查询时越往后翻性能越差，解决的原则：缩小扫描范围，如下所示：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> orders <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">id</span> <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">100000</span>,<span class="number">10</span></span><br></pre></td></tr></table></figure>

<p>耗时0.4秒</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> orders <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">id</span> <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">1000000</span>,<span class="number">10</span></span><br></pre></td></tr></table></figure>

<p>耗时5.2秒</p>
<p>先筛选出ID缩小查询范围，写法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> orders <span class="keyword">where</span> <span class="keyword">id</span> &gt; (<span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> orders <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">id</span> <span class="keyword">desc</span>  <span class="keyword">limit</span> <span class="number">1000000</span>, <span class="number">1</span>) <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">id</span> <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">10</span></span><br></pre></td></tr></table></figure>

<p>耗时0.5秒</p>
<p>如果查询条件仅有主键ID，写法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> orders <span class="keyword">where</span> <span class="keyword">id</span> <span class="keyword">between</span> <span class="number">1000000</span> <span class="keyword">and</span> <span class="number">1000010</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">id</span> <span class="keyword">desc</span></span><br></pre></td></tr></table></figure>

<p>耗时0.3秒</p>
<p>如果以上方案依然很慢呢？只好用游标了，感兴趣的朋友阅读JDBC使用游标实现分页查询的方法</p>
<h2 id="其他数据库"><a href="#其他数据库" class="headerlink" title="其他数据库"></a><strong>其他数据库</strong></h2><p>作为一名后端开发人员，务必精通作为存储核心的MySQL或SQL Server，也要积极关注NoSQL数据库，他们已经足够成熟并被广泛采用，能解决特定场景下的性能瓶颈。</p>
<table>
<thead>
<tr>
<th>分类</th>
<th>数据库</th>
<th>特性</th>
</tr>
</thead>
<tbody><tr>
<td>键值型</td>
<td>Memcache</td>
<td>缓存,大量数据给访问负载</td>
</tr>
<tr>
<td>键值型</td>
<td>Redis</td>
<td>缓存,比Memcache支持更多数据类型,支持持久化</td>
</tr>
<tr>
<td>列式存储</td>
<td>HBase</td>
<td>海量数据存储</td>
</tr>
<tr>
<td>文档型</td>
<td>MongoDB</td>
<td>知名文档型数据库,也可用于缓存</td>
</tr>
<tr>
<td>文档型</td>
<td>CouchDB</td>
<td>Apache开源,专注于易用性, 支持REST API</td>
</tr>
<tr>
<td>文档型</td>
<td>SequolaDB</td>
<td>国内知名文档型数据库</td>
</tr>
<tr>
<td>图形</td>
<td>Neo4J</td>
<td>社交网络关系图谱,推荐系统等</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库设计</tag>
        <tag>数据库优化</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot原理深入剖析</title>
    <url>/blog/2020/05/09/SpringBoot/</url>
    <content><![CDATA[<h1 id="SpringBoot原理深入剖析"><a href="#SpringBoot原理深入剖析" class="headerlink" title="SpringBoot原理深入剖析"></a>SpringBoot原理深入剖析</h1><h2 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h2><p>构建spring boot工程时,统一引入的依赖spring-boot-starter-parent  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;<span class="name">11.</span>/<span class="attr">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>代码底层引入了spring-boot-dependencies ,核心代码如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../../spring-boot-dependencies<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>继续深究底层</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activemq.version</span>&gt;</span>5.15.11<span class="tag">&lt;/<span class="name">activemq.version</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">solr.version</span>&gt;</span>8.2.0<span class="tag">&lt;/<span class="name">solr.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>8.0.18<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">kafka.version</span>&gt;</span>2.3.1<span class="tag">&lt;/<span class="name">kafka.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-amqp.version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">spring-amqp.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-restdocs.version</span>&gt;</span>2.0.4.RELEASE<span class="tag">&lt;/<span class="name">spring-restdocs.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-retry.version</span>&gt;</span>1.2.4.RELEASE<span class="tag">&lt;/<span class="name">spring-retry.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-security.version</span>&gt;</span>5.2.1.RELEASE<span class="tag">&lt;/<span class="name">spring-security.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-session-bom.version</span>&gt;</span>Corn-RELEASE<span class="tag">&lt;/<span class="name">spring-session-bom.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-ws.version</span>&gt;</span>3.0.8.RELEASE<span class="tag">&lt;/<span class="name">spring-ws.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sqlite-jdbc.version</span>&gt;</span>3.28.0<span class="tag">&lt;/<span class="name">sqlite-jdbc.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sun-mail.version</span>&gt;</span>$&#123;jakarta-mail.version&#125;<span class="tag">&lt;/<span class="name">sun-mail.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tomcat.version</span>&gt;</span>9.0.29<span class="tag">&lt;/<span class="name">tomcat.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thymeleaf.version</span>&gt;</span>3.0.11.RELEASE<span class="tag">&lt;/<span class="name">thymeleaf.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thymeleaf-extras-data-attribute.version</span>&gt;</span>2.0.1<span class="tag">&lt;/<span class="name">thymeleaf-extras-dataattribute.version</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>从这可以看出, 该文件通过变迁对一些常用技术框架的依赖文件进行了统一管理,以至于我们在开发过程中,不用自己引入对应的依赖</p>
<h2 id="自动配置"><a href="#自动配置" class="headerlink" title="自动配置"></a>自动配置</h2><p>Spring Boot应用程序入口是@SpringBootApplication 注解标注类的main()方法, @SpringBootApplication  能够扫描Spring组件并自动配置, 下面看@SpringBootApplication  内部源码剖析</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootDemoApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	    SpringApplication.run(SpringbootDemoApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)    <span class="comment">//注解的适用范围,Type表示注解可以描述在类、接口、注解或枚举中</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME) <span class="comment">///表示注解的生命周期，Runtime运行时</span></span><br><span class="line"><span class="meta">@Documented</span> <span class="comment">////表示注解可以记录在javadoc中</span></span><br><span class="line"><span class="meta">@Inherited</span>   <span class="comment">//表示可以被子类继承该注解</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span> <span class="comment">//// 标明该类为配置类</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span>  <span class="comment">// 启动自动配置功能</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(excludeFilters = &#123;   <span class="comment">// 包扫描器 &lt;context:component-scan base-package="com.xxx.xxx"/&gt;</span></span><br><span class="line">		<span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = TypeExcludeFilter<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line"><span class="class">		@<span class="title">Filter</span>(<span class="title">type</span> </span>= FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter<span class="class">.<span class="keyword">class</span>) &#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">SpringBootApplication</span> </span>&#123;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从上述源码可以看出,@SpringBootApplication  注解是一个组合注解,主要功能由@SpringBootConfiguration̵ @EnableAutoConfiguration̵ @ComponentScan 三个核心注解组成</p>
<p> @SpringBootConfiguration  注解表示Spring Boot配置类, 实际是对 @Configuration  注解一个名称的改写,底层用的还是Spring提供的功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Configuration</span> <span class="comment">//配置IOC容器</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootConfiguration &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>@EnableAutoConfiguration   注解表示开启自动配置功能,该注解也是最重要的注解, 也是实现了自动化配置的注解, 核心代码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@AutoConfigurationPackage</span>		<span class="comment">//自动配置包 : 会把@springbootApplication注解标注的类所在包名拿到，并且对该包及其子包进行扫描，将组件添加到容器中</span></span><br><span class="line"><span class="meta">@Import</span>(AutoConfigurationImportSelector<span class="class">.<span class="keyword">class</span>)  //可以帮助<span class="title">springboot</span>应用将所有符合条件的@<span class="title">Configuration</span>配置都加载到当前<span class="title">SpringBoot</span>创建并使用的<span class="title">IoC</span>容器(<span class="title">ApplicationContext</span>)中</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">EnableAutoConfiguration</span> </span>&#123;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以发现,它也是一个组合注解,Spring中有很多以Enable开头的注解,其作用就算借助@Import来收集并注册特定场景相关的bean,并加载导IoC容器中.</p>
<p>其核心两个注解分别是</p>
<ul>
<li><p><strong>@AutoConfigurationPackage</strong>  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//spring框架的底层注解，它的作用就是给容器中导入某个组件类，</span></span><br><span class="line"><span class="comment">//例如@Import(AutoConfigurationPackages.Registrar.class)，它就是将Registrar这个组件类导入到容器中</span></span><br><span class="line"><span class="meta">@Import</span>(AutoConfigurationPackages.Registrar<span class="class">.<span class="keyword">class</span>)  //  默认将主配置类(@<span class="title">SpringBootApplication</span>)所在的包及其子包里面的所有组件扫描到<span class="title">Spring</span>容器中</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">AutoConfigurationPackage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中@Import(AutoConfigurationPackages.Registrar.class) 就是将Registrar类,加载导容器中去,查看Registrar  类的registerBeanDefinitions  ,就算导入过程的具体实现:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取的是项目主程序启动类所在的目录</span></span><br><span class="line">		<span class="comment">//metadata:注解标注的元数据信息</span></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata metadata, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">			<span class="comment">//默认将会扫描@SpringBootApplication标注的主配置类所在的包及其子包下所有组件</span></span><br><span class="line">			register(registry, <span class="keyword">new</span> PackageImport(metadata).getPackageName());</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">determineImports</span><span class="params">(AnnotationMetadata metadata)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> Collections.singleton(<span class="keyword">new</span> PackageImport(metadata));</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>@Import({AutoConfigurationImportSelector.class})</strong></p>
<p>将AutoConfigurationImportSelector  这个类导入导容器中, AutoConfigurationImportSelector  可以借助SpringBoot应用程序将所有符合调价的@Configuration  配置加载到容器中, 继续深究AutoConfigurationImportSelector源码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br><span class="line">	<span class="comment">//判断 enableautoconfiguration注解有没有开启，默认开启（是否进行自动装配）</span></span><br><span class="line">	<span class="keyword">if</span> (!isEnabled(annotationMetadata)) &#123;</span><br><span class="line">		<span class="keyword">return</span> NO_IMPORTS;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//1. 加载配置文件META-INF/spring-autoconfigure-metadata.properties，从中获取所有支持自动配置类的条件</span></span><br><span class="line">	<span class="comment">//作用：SpringBoot使用一个Annotation的处理器来收集一些自动装配的条件，那么这些条件可以在META-INF/spring-autoconfigure-metadata.properties进行配置。</span></span><br><span class="line">	<span class="comment">// SpringBoot会将收集好的@Configuration进行一次过滤进而剔除不满足条件的配置类</span></span><br><span class="line">	<span class="comment">// 自动配置的类全名.条件=值</span></span><br><span class="line">	AutoConfigurationMetadata autoConfigurationMetadata = AutoConfigurationMetadataLoader.loadMetadata(<span class="keyword">this</span>.beanClassLoader);</span><br><span class="line">	AutoConfigurationEntry autoConfigurationEntry = getAutoConfigurationEntry(autoConfigurationMetadata, annotationMetadata);</span><br><span class="line">	<span class="keyword">return</span> StringUtils.toStringArray(autoConfigurationEntry.getConfigurations());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>深究loadMetadata方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AutoConfigurationMetadata <span class="title">loadMetadata</span><span class="params">(ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//重载方法</span></span><br><span class="line">		<span class="keyword">return</span> loadMetadata(classLoader, PATH);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">static</span> AutoConfigurationMetadata <span class="title">loadMetadata</span><span class="params">(ClassLoader classLoader, String path)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">//1.读取spring-boot-autoconfigure.jar包中spring-autoconfigure-metadata.properties的信息生成urls枚举对象</span></span><br><span class="line">            <span class="comment">// 获得 PATH 对应的 URL 们</span></span><br><span class="line">			Enumeration&lt;URL&gt; urls = (classLoader != <span class="keyword">null</span>) ? classLoader.getResources(path) : ClassLoader.getSystemResources(path);</span><br><span class="line">            <span class="comment">// 遍历 URL 数组，读取到 properties 中</span></span><br><span class="line">            Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">			<span class="comment">//2.解析urls枚举对象中的信息封装成properties对象并加载</span></span><br><span class="line">			<span class="keyword">while</span> (urls.hasMoreElements()) &#123;</span><br><span class="line">				properties.putAll(PropertiesLoaderUtils.loadProperties(<span class="keyword">new</span> UrlResource(urls.nextElement())));</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// 将 properties 转换成 PropertiesAutoConfigurationMetadata 对象</span></span><br><span class="line"></span><br><span class="line">			<span class="comment">//根据封装好的properties对象生成AutoConfigurationMetadata对象返回</span></span><br><span class="line">			<span class="keyword">return</span> loadMetadata(properties);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unable to load @ConditionalOnClass location ["</span> + path + <span class="string">"]"</span>, ex);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>回到AutoConfigurationImportSelector类 深究getAutoConfigurationEntry</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> AutoConfigurationEntry <span class="title">getAutoConfigurationEntry</span><span class="params">(AutoConfigurationMetadata autoConfigurationMetadata, AnnotationMetadata annotationMetadata)</span> </span>&#123;</span><br><span class="line">	    <span class="comment">// 1. 判断是否开启注解。如未开启，返回空串</span></span><br><span class="line">		<span class="keyword">if</span> (!isEnabled(annotationMetadata)) &#123;</span><br><span class="line">			<span class="keyword">return</span> EMPTY_ENTRY;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 2. 获得注解的属性</span></span><br><span class="line">		AnnotationAttributes attributes = getAttributes(annotationMetadata);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 3. getCandidateConfigurations()用来获取默认支持的自动配置类名列表</span></span><br><span class="line">		<span class="comment">// spring Boot在启动的时候，使用内部工具类SpringFactoriesLoader，查找classpath上所有jar包中的META-INF/spring.factories，</span></span><br><span class="line">		<span class="comment">// 找出其中key为org.springframework.boot.autoconfigure.EnableAutoConfiguration的属性定义的工厂类名称，</span></span><br><span class="line">		<span class="comment">// 将这些值作为自动配置类导入到容器中，自动配置类就生效了</span></span><br><span class="line">		List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="comment">// 3.1 //去除重复的配置类，若我们自己写的starter 可能存在重复的</span></span><br><span class="line">		configurations = removeDuplicates(configurations);</span><br><span class="line">		<span class="comment">// 4. 如果项目中某些自动配置类，我们不希望其自动配置，我们可以通过EnableAutoConfiguration的exclude或excludeName属性进行配置，</span></span><br><span class="line">		<span class="comment">// 或者也可以在配置文件里通过配置项“spring.autoconfigure.exclude”进行配置。</span></span><br><span class="line">		<span class="comment">//找到不希望自动配置的配置类（根据EnableAutoConfiguration注解的一个exclusions属性）</span></span><br><span class="line">		Set&lt;String&gt; exclusions = getExclusions(annotationMetadata, attributes);</span><br><span class="line">		<span class="comment">// 4.1 校验排除类（exclusions指定的类必须是自动配置类，否则抛出异常）</span></span><br><span class="line">		checkExcludedClasses(configurations, exclusions);</span><br><span class="line">		<span class="comment">// 4.2 从 configurations 中，移除所有不希望自动配置的配置类</span></span><br><span class="line">		configurations.removeAll(exclusions);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 5. 对所有候选的自动配置类进行筛选，根据项目pom.xml文件中加入的依赖文件筛选出最终符合当前项目运行环境对应的自动配置类</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//@ConditionalOnClass ： 某个class位于类路径上，才会实例化这个Bean。</span></span><br><span class="line">		<span class="comment">//@ConditionalOnMissingClass ： classpath中不存在该类时起效</span></span><br><span class="line">		<span class="comment">//@ConditionalOnBean ： DI容器中存在该类型Bean时起效</span></span><br><span class="line">		<span class="comment">//@ConditionalOnMissingBean ： DI容器中不存在该类型Bean时起效</span></span><br><span class="line">		<span class="comment">//@ConditionalOnSingleCandidate ： DI容器中该类型Bean只有一个或@Primary的只有一个时起效</span></span><br><span class="line">		<span class="comment">//@ConditionalOnExpression ： SpEL表达式结果为true时</span></span><br><span class="line">		<span class="comment">//@ConditionalOnProperty ： 参数设置或者值一致时起效</span></span><br><span class="line">		<span class="comment">//@ConditionalOnResource ： 指定的文件存在时起效</span></span><br><span class="line">		<span class="comment">//@ConditionalOnJndi ： 指定的JNDI存在时起效</span></span><br><span class="line">		<span class="comment">//@ConditionalOnJava ： 指定的Java版本存在时起效</span></span><br><span class="line">		<span class="comment">//@ConditionalOnWebApplication ： Web应用环境下起效</span></span><br><span class="line">		<span class="comment">//@ConditionalOnNotWebApplication ： 非Web应用环境下起效</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//总结一下判断是否要加载某个类的两种方式：</span></span><br><span class="line">		<span class="comment">//根据spring-autoconfigure-metadata.properties进行判断。</span></span><br><span class="line">		<span class="comment">//要判断@Conditional是否满足</span></span><br><span class="line">		<span class="comment">// 如@ConditionalOnClass(&#123; SqlSessionFactory.class, SqlSessionFactoryBean.class &#125;)表示需要在类路径中存在SqlSessionFactory.class、SqlSessionFactoryBean.class这两个类才能完成自动注册。</span></span><br><span class="line">		configurations = filter(configurations, autoConfigurationMetadata);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="comment">// 6. 将自动配置导入事件通知监听器</span></span><br><span class="line">		<span class="comment">//当AutoConfigurationImportSelector过滤完成后会自动加载类路径下Jar包中META-INF/spring.factories文件中 AutoConfigurationImportListener的实现类，</span></span><br><span class="line">		<span class="comment">// 并触发fireAutoConfigurationImportEvents事件。</span></span><br><span class="line">		fireAutoConfigurationImportEvents(configurations, exclusions);</span><br><span class="line">		<span class="comment">// 7. 创建 AutoConfigurationEntry 对象</span></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> AutoConfigurationEntry(configurations, exclusions);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>@EnableAutoConfiguration  就是从classpath中搜寻META-INF/spring.factories  配置文件,并将其中的的org.springframework.boot.autoconfigure.EnableutoConfiguration  对应的配置项通过反射,加载到容器中.</p>
<p><strong>总结</strong></p>
<p>Spring Boot底层实现自动装配的步骤是:</p>
<ol>
<li>程序启动</li>
<li>@SpringBootApplication  起作用</li>
<li>@EnableAutoConfiguration</li>
<li>@AutoConfigurationPackage 主要是@Import(AutoConfigurationPackages.Registrar.class)  通过将Registrar  类导入容器中,而Registrar  主要作用是将主配置类同级目录及子包,并将相应的组件导入到容器中</li>
<li>@Import(AutoConfigurationImportSelector.class)  它通过将AutoConfigurationImportSelector  导入容器中, AutoConfigurationImportSelector  通过selectImports  方法的执行, 会将内部工具类SpringFactoriesLoader, 查找classpath上所有jar包中的META-INF/spring.factories  惊醒加载,并通过反射将配置类夹给SpringFactory  加载器进行一系列的容器创建过程</li>
</ol>
</li>
</ul>
<h2 id="执行原理"><a href="#执行原理" class="headerlink" title="执行原理"></a>执行原理</h2><p>下面我们查看run()方法内部的源码，核心代码具体如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(Class&lt;?&gt;[] primarySources, String[] args)</span> </span>&#123;</span><br><span class="line">   <span class="comment">//SpringApplication的启动由两部分组成：</span></span><br><span class="line">	<span class="comment">//1. 实例化SpringApplication对象</span></span><br><span class="line">	<span class="comment">//2. run(args)：调用run方法</span></span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> SpringApplication(primarySources).run(args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从上述源码可以看出，SpringApplication.run()方法内部执行了两个操作，分别是SpringApplication实 例的初始化创建和调用run()启动项目，这两个阶段的实现具体说明如下:</p>
<h3 id="实例初始化"><a href="#实例初始化" class="headerlink" title="实例初始化"></a>实例初始化</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(&#123; <span class="string">"unchecked"</span>, <span class="string">"rawtypes"</span> &#125;)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">SpringApplication</span><span class="params">(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">this</span>.sources = <span class="keyword">new</span> LinkedHashSet();</span><br><span class="line">		<span class="keyword">this</span>.bannerMode = Mode.CONSOLE;</span><br><span class="line">		<span class="keyword">this</span>.logStartupInfo = <span class="keyword">true</span>;</span><br><span class="line">		<span class="keyword">this</span>.addCommandLineProperties = <span class="keyword">true</span>;</span><br><span class="line">		<span class="keyword">this</span>.addConversionService = <span class="keyword">true</span>;</span><br><span class="line">		<span class="keyword">this</span>.headless = <span class="keyword">true</span>;</span><br><span class="line">		<span class="keyword">this</span>.registerShutdownHook = <span class="keyword">true</span>;</span><br><span class="line">		<span class="keyword">this</span>.additionalProfiles = <span class="keyword">new</span> HashSet();</span><br><span class="line">		<span class="keyword">this</span>.isCustomEnvironment = <span class="keyword">false</span>;</span><br><span class="line">		<span class="keyword">this</span>.resourceLoader = resourceLoader;</span><br><span class="line">		Assert.notNull(primarySources, <span class="string">"PrimarySources must not be null"</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">//项目启动类 SpringbootDemoApplication.class设置为属性存储起来</span></span><br><span class="line">		<span class="keyword">this</span>.primarySources = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(Arrays.asList(primarySources));</span><br><span class="line"></span><br><span class="line">		<span class="comment">//设置应用类型是SERVLET应用（Spring 5之前的传统MVC应用）还是REACTIVE应用（Spring 5开始出现的WebFlux交互式应用）</span></span><br><span class="line">		<span class="keyword">this</span>.webApplicationType = WebApplicationType.deduceFromClasspath();</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 设置初始化器(Initializer),最后会调用这些初始化器</span></span><br><span class="line">		<span class="comment">//所谓的初始化器就是org.springframework.context.ApplicationContextInitializer的实现类,在Spring上下文被刷新之前进行初始化的操作</span></span><br><span class="line">		setInitializers((Collection) getSpringFactoriesInstances(ApplicationContextInitializer<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 设置监听器(Listener)</span></span><br><span class="line">		setListeners((Collection) getSpringFactoriesInstances(ApplicationListener<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 初始化 mainApplicationClass 属性:用于推断并设置项目main()方法启动的主程序启动类</span></span><br><span class="line">		<span class="keyword">this</span>.mainApplicationClass = deduceMainApplicationClass();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>从上述源码可以看出，SpringApplication的初始化过程主要包括4部分，具体说明如下。</p>
<ul>
<li>(1) this.webApplicationType = WebApplicationType.deduceFromClasspath()</li>
</ul>
<p>用于判断当前webApplicationType应用的类型。deduceFromClasspath()方法用于查看Classpath类路 径下是否存在某个特征类，从而判断当前webApplicationType类型是SERVLET应用(Spring 5之前的传 统MVC应用)还是REACTIVE应用(Spring 5开始出现的WebFlux交互式应用)</p>
<ul>
<li>(2) this.setInitializers(this.getSpringFactorieslnstances(ApplicationContextlnitializer.class))</li>
</ul>
<p>用于Spr ingApplication应用的初始化器设置。在初始化器设置过程中，会使用Sp ring类加载器</p>
<p>Spr ingFacto riesLoade r 从 META-INF/sp ring .facto ries 类路径下的 META-INF 下的 spr ing .facto res 文件中 获取所有可用的应用初始化器类ApplicationContextlnitialize r。</p>
<ul>
<li>(3) this.setListeners(this.getSpringFactorieslnstances(ApplicationListener.class))</li>
</ul>
<p>用于Spr ingApplication应用的监听器设置。监听器设置的过程与上一步初始化器设置的过程基本一样， 也是使用 Spr ingFacto riesLoade r 从 META-INF/sp ring .facto ries 类路径下的 META-INF 下的 spr ing .facto res文件中获取所有可用的监听器类ApplicationListene r。</p>
<ul>
<li>(4) this.mainApplicationClass = this.deduceMainApplicationClass()</li>
</ul>
<p>用于推断并设置项目main()方法启动的主程序启动类</p>
<h3 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h3><p>分析完(new Spr ingApplication(p rimarySou rces)) .run()(args)源码前一部分 Spr ingApplication 实例对象 的初始化创建后，查看r un(a rgs)方法执行的项目初始化启动过程，核心代码具体如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">	    <span class="comment">// 创建 StopWatch 对象，并启动。StopWatch 主要用于简单统计 run 启动过程的时长。</span></span><br><span class="line">		StopWatch stopWatch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">		stopWatch.start();</span><br><span class="line">		<span class="comment">// 初始化应用上下文和异常报告集合</span></span><br><span class="line">		ConfigurableApplicationContext context = <span class="keyword">null</span>;</span><br><span class="line">		Collection&lt;SpringBootExceptionReporter&gt; exceptionReporters = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">		<span class="comment">// 配置 headless 属性</span></span><br><span class="line">		configureHeadlessProperty();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="comment">//   （1）获取并启动监听器</span></span><br><span class="line">		SpringApplicationRunListeners listeners = getRunListeners(args);</span><br><span class="line">		listeners.starting();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">		    <span class="comment">// 创建  ApplicationArguments 对象 初始化默认应用参数类</span></span><br><span class="line">			<span class="comment">// args是启动Spring应用的命令行参数，该参数可以在Spring应用中被访问。如：--server.port=9000</span></span><br><span class="line">			ApplicationArguments applicationArguments = <span class="keyword">new</span> DefaultApplicationArguments(args);</span><br><span class="line"></span><br><span class="line">			<span class="comment">//（2）项目运行环境Environment的预配置</span></span><br><span class="line">			<span class="comment">// 创建并配置当前SpringBoot应用将要使用的Environment</span></span><br><span class="line">			<span class="comment">// 并遍历调用所有的SpringApplicationRunListener的environmentPrepared()方法</span></span><br><span class="line">			ConfigurableEnvironment environment = prepareEnvironment(listeners, applicationArguments);</span><br><span class="line"></span><br><span class="line">			configureIgnoreBeanInfo(environment);</span><br><span class="line">			<span class="comment">// 准备Banner打印器 - 就是启动Spring Boot的时候打印在console上的ASCII艺术字体</span></span><br><span class="line">			Banner printedBanner = printBanner(environment);</span><br><span class="line"></span><br><span class="line">			<span class="comment">// （3）创建Spring容器</span></span><br><span class="line">			context = createApplicationContext();</span><br><span class="line">			<span class="comment">// 获得异常报告器 SpringBootExceptionReporter 数组</span></span><br><span class="line">			<span class="comment">//这一步的逻辑和实例化初始化器和监听器的一样，</span></span><br><span class="line">			<span class="comment">// 都是通过调用 getSpringFactoriesInstances 方法来获取配置的异常类名称并实例化所有的异常处理类。</span></span><br><span class="line">			exceptionReporters = getSpringFactoriesInstances(</span><br><span class="line">					SpringBootExceptionReporter<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line">					new Class[] &#123; ConfigurableApplicationContext.class &#125;, context);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">			<span class="comment">// （4）Spring容器前置处理</span></span><br><span class="line">			<span class="comment">//这一步主要是在容器刷新之前的准备动作。包含一个非常关键的操作：将启动类注入容器，为后续开启自动化配置奠定基础。</span></span><br><span class="line">			prepareContext(context, environment, listeners, applicationArguments,</span><br><span class="line">					printedBanner);</span><br><span class="line"></span><br><span class="line">			<span class="comment">// （5）：刷新容器</span></span><br><span class="line">			refreshContext(context);</span><br><span class="line"></span><br><span class="line">			<span class="comment">// （6）：Spring容器后置处理</span></span><br><span class="line">			<span class="comment">//扩展接口，设计模式中的模板方法，默认为空实现。</span></span><br><span class="line">			<span class="comment">// 如果有自定义需求，可以重写该方法。比如打印一些启动结束log，或者一些其它后置处理</span></span><br><span class="line">			afterRefresh(context, applicationArguments);</span><br><span class="line">			<span class="comment">// 停止 StopWatch 统计时长</span></span><br><span class="line">			stopWatch.stop();</span><br><span class="line">			<span class="comment">// 打印 Spring Boot 启动的时长日志。</span></span><br><span class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</span><br><span class="line">				<span class="keyword">new</span> StartupInfoLogger(<span class="keyword">this</span>.mainApplicationClass).logStarted(getApplicationLog(), stopWatch);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// （7）发出结束执行的事件通知</span></span><br><span class="line">			listeners.started(context);</span><br><span class="line"></span><br><span class="line">			<span class="comment">// （8）：执行Runners</span></span><br><span class="line">			<span class="comment">//用于调用项目中自定义的执行器XxxRunner类，使得在项目启动完成后立即执行一些特定程序</span></span><br><span class="line">			<span class="comment">//Runner 运行器用于在服务启动时进行一些业务初始化操作，这些操作只在服务启动后执行一次。</span></span><br><span class="line">			<span class="comment">//Spring Boot提供了ApplicationRunner和CommandLineRunner两种服务接口</span></span><br><span class="line">			callRunners(context, applicationArguments);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">		    <span class="comment">// 如果发生异常，则进行处理，并抛出 IllegalStateException 异常</span></span><br><span class="line">			handleRunFailure(context, ex, exceptionReporters, listeners);</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//   (9)发布应用上下文就绪事件</span></span><br><span class="line">		<span class="comment">//表示在前面一切初始化启动都没有问题的情况下，使用运行监听器SpringApplicationRunListener持续运行配置好的应用上下文ApplicationContext，</span></span><br><span class="line">		<span class="comment">// 这样整个Spring Boot项目就正式启动完成了。</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			listeners.running(context);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">            <span class="comment">// 如果发生异常，则进行处理，并抛出 IllegalStateException 异常</span></span><br><span class="line">            handleRunFailure(context, ex, exceptionReporters, <span class="keyword">null</span>);</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line">		&#125;</span><br><span class="line">		 <span class="comment">//返回容器</span></span><br><span class="line">		<span class="keyword">return</span> context;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>从上述源码可以看出，项目初始化启动过程大致包括以下部分：</p>
<ul>
<li><p>第一步：获取并启动监听器</p>
<p>this.getRunListeners(args)和listeners.starting()方法主要用于获取SpringApplication 实例初始化过程中初始化的SpringApplicationRunListener监听器并运行。</p>
</li>
<li><p>第二步：根据SpringApplicationRunListeners以及参数来准备环境</p>
<p>this.prepareEnvironment(listeners, applicationArguments)方法主要用于对项目运行环境 进行预设置，同时通过this.configurelgnoreBeanlnfo(environment)方法排除一些不需要的运行环境</p>
</li>
<li><p>第三步：创建Spring容器</p>
<p>根据webApplicationType进行判断，确定容器类型，如果该类型为SERVLET类型，会通过反射装载对 应的字节码，也就是 A nnotationConfigServletWebServerApplicationContext，接着使用之前初 始化设置的context (应用上下文环境)、environment (项目运行环境)、listeners (运行监听 器)、applicationArguments (项目参数)和printedBanner (项目图标信息)进行应用上下文的组 装配置，并刷新配置</p>
</li>
<li><p>第四步：Spring容器前置处理</p>
<p>这一步主要是在容器刷新之前的准备动作。设置容器环境，包括各种变量等等，其中包含一个非常关键的操 作：将启动类注入容器，为后续开启自动化配置奠定基础</p>
</li>
<li><p>第五步：刷新容器</p>
<p>开启刷新spring容器，通过refresh方法对整个IOC容器的初始化(包括bea n资源的定位，解析，注册等 等)，同时向JVM运行时注册一个关机钩子，在JVM关机时会关闭这个上下文，除非当时它已经关闭</p>
</li>
<li><p>第六步：Spring容器后置处理</p>
<p>扩展接口，设计模式中的模板方法，默认为空实现。如果有自定义需求，可以重写该方法。比如打印一些启 动结束log,或者一些其它后置处理。</p>
</li>
<li><p>第七步：发出结束执行的事件</p>
<p>获取EventPublishingRunListener监听器，并执行其started方法，并且将创建的Spring容器传进 去了，创建—ApplicationStartedEvent 事件，并执行 ConfigurableApplicationContext 的 publishEvent方法，也就是说这里是在Spring容器中发布事件，并不是在SpringApplication中发布 事件，和前面的starting是不同的，前面的starting是直接向SpringApplication中的监听器发布启动事件。</p>
</li>
<li><p>第八步：执行Runners</p>
<p>用于调用项目中自定义的执行器XxxRunner类，使得在项目启动完成后立即执行一些特定程序。其中， Spring Boot提供的执行器接口有A pplicationRunner和CommandLineRunner两种，在使用时只需 要自定义一个执行器类实现其中一个接口并重写对应的run()方法接口，然后Spring Boot项目启动后会 立即执行这些特定程序</p>
</li>
</ul>
]]></content>
      <categories>
        <category>框架</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Core总结</title>
    <url>/blog/2020/05/03/Spring%20Core%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="Spring学习笔记"><a href="#Spring学习笔记" class="headerlink" title="Spring学习笔记"></a>Spring学习笔记</h1><h2 id="Spring的优势"><a href="#Spring的优势" class="headerlink" title="Spring的优势"></a>Spring的优势</h2><ul>
<li><p><strong>⽅便解耦，简化开发</strong><br>通过Spring提供的IoC容器，可以将对象间的依赖关系交由Spring进⾏控制，避免硬编码所造成的<br>过度程序耦合。⽤户也不必再为单例模式类、属性⽂件解析等这些很底层的需求编写代码，可以更<br>专注于上层的应⽤。</p>
</li>
<li><p><strong>AOP编程的⽀持</strong><br>通过Spring的AOP功能，⽅便进⾏⾯向切⾯的编程，许多不容易⽤传统OOP实现的功能可以通过<br>AOP轻松应付。</p>
</li>
<li><p><strong>声明式事务的⽀持</strong><br>@Transactional<br>可以将我们从单调烦闷的事务管理代码中解脱出来，通过声明式⽅式灵活的进⾏事务的管理，提⾼<br>开发效率和质量。</p>
</li>
<li><p><strong>⽅便程序的测试</strong><br>可以⽤⾮容器依赖的编程⽅式进⾏⼏乎所有的测试⼯作，测试不再是昂贵的操作，⽽是随⼿可做的<br>事情。</p>
</li>
<li><p><strong>⽅便集成各种优秀框架</strong><br>Spring可以降低各种框架的使⽤难度，提供了对各种优秀框架（Struts、Hibernate、Hessian、<br>Quartz等）的直接⽀持。</p>
</li>
<li><p><strong>降低JavaEE API的使⽤难度</strong><br>Spring对JavaEE API（如JDBC、JavaMail、远程调⽤等）进⾏了薄薄的封装层，使这些API的使⽤<br>难度⼤为降低。</p>
</li>
<li><p><strong>源码是经典的 Java 学习范例</strong><br>Spring的源代码设计精妙、结构清晰、匠⼼独⽤，处处体现着⼤师对Java设计模式灵活运⽤以及对<br>Java技术的⾼深造诣。它的源代码⽆意是Java技术的最佳实践的范例。</p>
</li>
</ul>
<h2 id="Spring-IoC"><a href="#Spring-IoC" class="headerlink" title="Spring IoC"></a>Spring IoC</h2><h3 id="bean的生命周期"><a href="#bean的生命周期" class="headerlink" title="bean的生命周期"></a>bean的生命周期</h3><p>bean的生命周期是指一个bean对象从创建到销毁的过程. bean不等于普通对象, 是里胡一个java对象只是bean的生命周期过程的一步,只有走完了流程, 才能称之为bean. 核心过程如下:</p>
<ol>
<li><p><strong>实例化bean</strong>: 主要通过反射技术实例化</p>
</li>
<li><p><strong>设置对象属性(依赖注入)</strong></p>
</li>
<li><p><strong>处理Aware接口</strong></p>
<p>如果实现了xxxAware接口, 会将相关的xxxAware实例注入给bean</p>
<p>如果实现了BeanNameAware接口,会调用它实现的setBeanName(String beanId)方法</p>
<p>如果事项了BeanFactoryAware接口, 会调用它实现的setBeanFactory()方法, 传递的是Spring工厂</p>
<p>如果实现了ApplicationContextAware接口, 会调用它实现的setApplicationContext()方法,传递的是Spring上下文</p>
</li>
<li><p><strong>BeanPostProcessor:</strong></p>
<p>如果实现了此接口,会调用 postProcessBeforeInitialization()方法</p>
</li>
<li><p><strong>InitializingBean与 init-method:</strong></p>
<p>实现bean初始化的一些逻辑</p>
<p>如果配置了init-method,则会自动调用此方法,完成自定义初始化逻辑</p>
</li>
<li><p>如果实现了<strong>BeanPostProcessor</strong>接口,会调用 postProcessAfterInitialization()方法</p>
</li>
<li><p><strong>DisposableBean</strong>:</p>
<p>当bean不需要使用时, 会经过清理阶段, 如果实现了此接口, 则会调用它实现的destroy()方法</p>
</li>
<li><p>最后,如果配置了<strong>destroy-method:</strong>则会自动调用此方法,完成自定义销毁逻辑</p>
</li>
</ol>
<h3 id="高级特性"><a href="#高级特性" class="headerlink" title="高级特性"></a>高级特性</h3><h4 id="lazy-Init-延迟加载"><a href="#lazy-Init-延迟加载" class="headerlink" title="lazy-Init 延迟加载"></a>lazy-Init 延迟加载</h4><p>设置 lazy-init 为 true 或者注解 @Lazy 的 bean 将不会在 ApplicationContext 启动时提前被实例化，⽽是第⼀次向容器<br>通过 getBean 索取 bean 或者在 bean被其他立即实例化的bean引用时实例化的。</p>
<h4 id="FactoryBean-和-BeanFactory"><a href="#FactoryBean-和-BeanFactory" class="headerlink" title="FactoryBean 和 BeanFactory"></a>FactoryBean 和 BeanFactory</h4><p>BeanFactory接⼝是容器的顶级接⼝，定义了容器的⼀些基础⾏为，负责⽣产和管理Bean的⼀个⼯⼚，<br>具体使⽤它下⾯的⼦接⼝类型，⽐如ApplicationContext；此处我们重点分析FactoryBean</p>
<p>Spring中Bean有两种，⼀种是普通Bean，⼀种是⼯⼚Bean（FactoryBean），FactoryBean可以⽣成<br>某⼀个类型的Bean实例（返回给我们），也就是说我们可以借助于它⾃定义Bean的创建过程。</p>
<p>自定义FactoryBean </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 可以让我们⾃定义Bean的创建过程（完成复杂Bean的定义）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FactoryBean</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="comment">// 返回FactoryBean创建的Bean实例，如果isSingleton返回true，</span></span><br><span class="line">    <span class="comment">//则该实例会放到Spring容器的单例对象缓存池中Map</span></span><br><span class="line">    <span class="function">T <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="comment">// 返回FactoryBean创建的Bean类型</span></span><br><span class="line">    Class&lt;?&gt; getObjectType();</span><br><span class="line">    <span class="comment">// 返回作⽤域是否单例</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  	  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="后置处理器"><a href="#后置处理器" class="headerlink" title="后置处理器"></a>后置处理器</h4><p>Spring提供了两种后处理bean的扩展接⼝, 分别为 BeanPostProcessor 和BeanFactoryPostProcessor，两者在使⽤上是有所区别的。⼯⼚初始化（BeanFactory）—&gt; Bean, 对象在BeanFactory初始化之后可以使⽤BeanFactoryPostProcessor进⾏后置处理, 做⼀些事情在Bean对象实例化（并不是Bean的整个⽣命周期完成）之后可以使⽤BeanPostProcessor进⾏后置处理做⼀些事情<br>注意：对象不⼀定是springbean，⽽springbean⼀定是个对象</p>
<h3 id="自动装配"><a href="#自动装配" class="headerlink" title="自动装配"></a>自动装配</h3><p>有五种自动装配方式, 可以用来知道Spring容器用自动装配方式来依赖注入:</p>
<ul>
<li><strong>no</strong>: 默认不进行自动装配, 通过显式设置ref属性来进行装配</li>
<li><strong>byName</strong>: 通过参数名自动装配, Spring容器在配置文件中发现bean的autowire属性被设置成byName,止呕容器试图装配和该bean的属性具有相同名字的bean</li>
<li><strong>byType</strong>: 通过参数类型自动装配, Spring容器在配置文件中发现bean的autowire属性被设置成byType，之后容器试图匹配、装配和该bean的属性具有相同类型的bean。如果有多个bean符合条件，则抛出错误。</li>
<li><strong>constructor</strong>：这个方式类似于byType，但是要提供给构造器参数，如果没有确定的带参数的构造器参数类型，将会抛出异常。</li>
<li><strong>autodetect</strong>：首先尝试使用constructor来自动装配，如果无法工作，则使用byType方式。</li>
</ul>
<h2 id="SpringAOP及应用"><a href="#SpringAOP及应用" class="headerlink" title="SpringAOP及应用"></a>SpringAOP及应用</h2><h3 id="AOP的实现"><a href="#AOP的实现" class="headerlink" title="AOP的实现"></a>AOP的实现</h3><p>Spring 实现AOP思想使⽤的是动态代理技术<br>默认情况下，Spring会根据被代理对象是否实现接⼝来选择使⽤JDK还是CGLIB。当被代理对象没有实现<br>任何接⼝时，Spring会选择CGLIB。当被代理对象实现了接⼝，Spring会选择JDK官⽅的代理技术，不过<br>我们可以通过配置的⽅式，让Spring强制使⽤CGLIB</p>
<h3 id="Spring-声明式事务的⽀持"><a href="#Spring-声明式事务的⽀持" class="headerlink" title="Spring 声明式事务的⽀持"></a>Spring 声明式事务的⽀持</h3><p><strong>编程式事务</strong>：在业务代码中添加事务控制代码，这样的事务控制机制就叫做编程式事务<br>        <strong>声明式事务</strong>：通过xml或者注解配置的⽅式达到事务控制的⽬的，叫做声明式事务</p>
<h4 id="事务的四大特性"><a href="#事务的四大特性" class="headerlink" title="事务的四大特性"></a>事务的四大特性</h4><ul>
<li><p>原⼦性（Atomicity） 原⼦性是指事务是⼀个不可分割的⼯作单位，事务中的操作要么都发⽣，要么都<br>不发⽣。从操作的⻆度来描述，事务中的各个操作要么都成功要么都失败</p>
</li>
<li><p>⼀致性（Consistency）事务必须使数据库从⼀个⼀致性状态变换到另外⼀个⼀致性状态。<br>例如转账前A有1000，B有1000。转账后A+B也得是2000。<br>⼀致性是从数据的⻆度来说的，（1000，1000） （900，1100），不应该出现（900，1000）</p>
</li>
<li><p>隔离性（Isolation）事务的隔离性是多个⽤户并发访问数据库时，数据库为每⼀个⽤户开启的事务，<br>每个事务不能被其他事务的操作数据所⼲扰，多个并发事务之间要相互隔离。<br>⽐如：事务1给员⼯涨⼯资2000，但是事务1尚未被提交，员⼯发起事务2查询⼯资，发现⼯资涨了2000<br>块钱，读到了事务1尚未提交的数据（脏读）</p>
</li>
<li><p>持久性（Durability）持久性是指⼀个事务⼀旦被提交，它对数据库中数据的改变就是永久性的，接下来即使数据库发⽣故障<br>也不应该对其有任何影响。</p>
</li>
</ul>
<h4 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h4><ul>
<li><p>Serializable（串⾏化）：可避免脏读、不可重复读、虚读情况的发⽣。（串⾏化） 最⾼</p>
</li>
<li><p>Repeatable read（可重复读）：可避免脏读、不可重复读情况的发⽣。(幻读有可能发⽣) 第⼆<br>该机制下会对要update的⾏进⾏加锁</p>
</li>
<li><p>Read committed（读已提交）：可避免脏读情况发⽣。不可重复读和幻读⼀定会发⽣。 第三</p>
</li>
<li><p>Read uncommitted（读未提交）：最低级别，以上情况均⽆法保证。(读未提交) 最低</p>
<table>
<thead>
<tr>
<th>事务隔离级别</th>
<th>脏读</th>
<th>不可重复度</th>
<th>幻读</th>
</tr>
</thead>
<tbody><tr>
<td>Read uncommitted（读未提交）</td>
<td>是</td>
<td>是</td>
<td>是</td>
</tr>
<tr>
<td>Read committed（读已提交)</td>
<td>否</td>
<td>是</td>
<td>是</td>
</tr>
<tr>
<td>Repeatable read（可重复读）</td>
<td>否</td>
<td>否</td>
<td>是</td>
</tr>
<tr>
<td>Serializable(串行化)</td>
<td>否</td>
<td>否</td>
<td>否</td>
</tr>
</tbody></table>
</li>
</ul>
<h2 id="Spring设计模式"><a href="#Spring设计模式" class="headerlink" title="Spring设计模式"></a>Spring设计模式</h2><ul>
<li><p><strong>工厂设计模式</strong>:  BeanFactory, ApplicationContext 通过工厂模式创建对象</p>
</li>
<li><p><strong>代理设计模式</strong>:  SrpingAOP 用到了JDK动态代理和CGLIB动态代理</p>
</li>
<li><p><strong>单例设计模式</strong>:  bean默认都是单例</p>
</li>
<li><p><strong>模板方法模式</strong>:  jdbcTemplate, hibernateTemplate 等以Template结尾的对数据库操作的类,用到了模板设计模式</p>
</li>
<li><p><strong>包装器设计模式</strong>:  动态数据源的支持</p>
</li>
<li><p><strong>观察者设计模式</strong>:   Spring时间驱动模型</p>
</li>
<li><p><strong>适配器模式</strong>:   SpringAOP的增强或者通知(Advice)使用了适配器模式, SpringMVC也是用到了该模式适配Controller</p>
</li>
</ul>
]]></content>
      <categories>
        <category>框架</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>一个java内存泄漏的排查案例</title>
    <url>/blog/2020/04/29/%E4%B8%80%E4%B8%AAjava%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E7%9A%84%E6%8E%92%E6%9F%A5%E6%A1%88%E4%BE%8B/</url>
    <content><![CDATA[<h1 id="一个java内存泄漏的排查案例"><a href="#一个java内存泄漏的排查案例" class="headerlink" title="一个java内存泄漏的排查案例"></a>一个java内存泄漏的排查案例</h1><p>这是个比较典型的java内存使用问题，定位过程也比较直接，但对新人还是有点参考价值的，所以就纪录了一下。</p>
<p>下面介绍一下在不了解系统代码的情况下，如何一步步分析和定位到具体代码的排查过程<br><em>（以便新人参考和自己回顾）</em></p>
<h2 id="初步的现象"><a href="#初步的现象" class="headerlink" title="初步的现象"></a>初步的现象</h2><p>业务系统消费MQ中消息速度变慢，积压了200多万条消息，通过jstat观察到业务系统fullgc比较频繁,到最后干脆OOM了：</p>
<p><img src="https://gitee.com/KenChan8848/images/raw/master/java%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F/638.jpg" alt=""></p>
<h2 id="进一步分析"><a href="#进一步分析" class="headerlink" title="进一步分析"></a>进一步分析</h2><p><strong>既然知道了内存使用存在问题，那么就要知道是哪些对象占用了大量内存.</strong></p>
<p>很多人都会想到把堆dump下来再用MAT等工具进行分析，但dump堆要花较长的时间，并且文件巨大，再从服务器上拖回本地导入工具，这个过程太折腾不到万不得已最好别这么干。</p>
<p>可以用更轻量级的在线分析，用jmap查看存活的对象情况（jmap -histo:live [pid]），可以看出HashTable中的元素有5000多万，占用内存大约1.5G的样子：</p>
<p><img src="https://gitee.com/KenChan8848/images/raw/master/java%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F/639.jpg" alt=""></p>
<h2 id="定位到代码"><a href="#定位到代码" class="headerlink" title="定位到代码"></a>定位到代码</h2><p><strong>现在已经知道了是HashTable的问题，那么就要定位出什么代码引起的</strong></p>
<p>接下来自然要看看是什么代码往HashTable里疯狂的put数据，于是用神器btrace跟踪Hashtable.put调用的堆栈。</p>
<p>首先写btrace脚本TracingHashTable.java：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.btrace.annotations.*;<span class="keyword">import</span> <span class="keyword">static</span> com.sun.btrace.BTraceUtils.*;<span class="meta">@BTracepublic</span> <span class="class"><span class="keyword">class</span> <span class="title">TracingHashTable</span> </span>&#123;        <span class="comment">/*指明要查看的方法，类*/</span></span><br><span class="line">        <span class="meta">@OnMethod</span>(</span><br><span class="line">            clazz=<span class="string">"java.util.Hashtable"</span>,</span><br><span class="line">            method=<span class="string">"put"</span>,</span><br><span class="line">            location=<span class="meta">@Location</span>(Kind.RETURN))        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">traceExecute</span><span class="params">(@Self java.util.Hashtable object)</span></span>&#123;</span><br><span class="line">                println(<span class="string">"调用堆栈！！"</span>);</span><br><span class="line">                jstack();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后运行：<br>bin/btrace -cp build 4947 TracingHashTable.java</p>
<p>看到有大量类似下图的调用堆栈</p>
<p><img src="https://gitee.com/KenChan8848/images/raw/master/java%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F/640.jpg" alt="img"></p>
<p>可以看出是在接收到消息后查询入库的代码造成的，业务方法调用ibatis再到mysql jdbc驱动执行statement时put了大量的属性到HashTable中。</p>
<p>通过以上排查已基本定位了由那块代码引起的，接下来就是打开代码工程进行白盒化改造了，对相应代码进行优化（不在本文范围内了。几个图中的pid不一致就别纠结了，有些是系统重启过再截图的）.</p>
]]></content>
      <categories>
        <category>问题排查</category>
      </categories>
      <tags>
        <tag>内存泄漏</tag>
        <tag>生产问题</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC &amp; JPA</title>
    <url>/blog/2020/05/07/SpringMVC%E4%B8%8EJPA/</url>
    <content><![CDATA[<h1 id="SpringMVC-amp-JPA"><a href="#SpringMVC-amp-JPA" class="headerlink" title="SpringMVC &amp; JPA"></a>SpringMVC &amp; JPA</h1><h2 id="SpringMVC工作流程"><a href="#SpringMVC工作流程" class="headerlink" title="SpringMVC工作流程"></a>SpringMVC工作流程</h2><h3 id="开发过程"><a href="#开发过程" class="headerlink" title="开发过程"></a>开发过程</h3><ol>
<li>配置DispatcherServlet前端控制器</li>
<li>开发处理具体业务逻辑的Handler（@Controller、@RequestMapping）</li>
<li>xml配置⽂件配置controller扫描，配置springmvc三⼤件</li>
<li>将xml⽂件路径告诉springmvc（DispatcherServlet）</li>
</ol>
<h3 id="SpringMVC-请求处理流程"><a href="#SpringMVC-请求处理流程" class="headerlink" title="SpringMVC 请求处理流程"></a>SpringMVC 请求处理流程</h3><p><img src="https://gitee.com/KenChan8848/images/raw/master/SpringMVC%E4%B8%8EJPA/SpringMVC%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B.jpg" alt=""></p>
<p>第⼀步：⽤户发送请求⾄前端控制器DispatcherServlet</p>
<p>第⼆步：DispatcherServlet收到请求调⽤HandlerMapping处理器映射器</p>
<p>第三步：处理器映射器根据请求Url找到具体的Handler（后端控制器），⽣成处理器对象及处理器拦截<br>器(如果 有则⽣成)⼀并返回DispatcherServlet</p>
<p>第四步：DispatcherServlet调⽤HandlerAdapter处理器适配器去调⽤Handler</p>
<p>第五步：处理器适配器执⾏Handler</p>
<p>第六步：Handler执⾏完成给处理器适配器返回ModelAndView</p>
<p>第七步：处理器适配器向前端控制器返回 ModelAndView，ModelAndView 是SpringMVC 框架的⼀个<br>底层对 象，包括 Model 和 View</p>
<p>第⼋步：前端控制器请求视图解析器去进⾏视图解析，根据逻辑视图名来解析真正的视图。</p>
<p>第九步：视图解析器向前端控制器返回View</p>
<p>第⼗步：前端控制器进⾏视图渲染，就是将模型数据（在 ModelAndView 对象中）填充到 request 域</p>
<p>第⼗⼀步：前端控制器向⽤户响应结果</p>
<h3 id="Spring-MVC-九⼤组件"><a href="#Spring-MVC-九⼤组件" class="headerlink" title="Spring MVC 九⼤组件"></a>Spring MVC 九⼤组件</h3><ul>
<li><p><strong>HandlerMapping（处理器映射器）</strong></p>
<p>HandlerMapping 是⽤来查找 Handler 的，也就是处理器，具体的表现形式可以是类，也可以是<br>⽅法。⽐如，标注了@RequestMapping的每个⽅法都可以看成是⼀个Handler。Handler负责具<br>体实际的请求处理，在请求到达后，HandlerMapping 的作⽤便是找到请求相应的处理器<br>Handler 和 Interceptor.</p>
</li>
<li><p><strong>HandlerAdapter（处理器适配器）</strong></p>
<p>一般handler分两种, 标注了@RequestMapping的每个⽅法以及实现了Controller接口的实现类都可以看成是⼀个Handler, HandlerAdapter的职责就是适配这不同的handler</p>
</li>
<li><p><strong>HandlerExceptionResolver</strong></p>
<p>HandlerExceptionResolver ⽤于处理 Handler 产⽣的异常情况。它的作⽤是根据异常设置<br>ModelAndView，之后交给渲染⽅法进⾏渲染，渲染⽅法会将 ModelAndView 渲染成⻚⾯。</p>
</li>
<li><p><strong>ViewResolver</strong></p>
<p>ViewResolver即视图解析器，⽤于将String类型的视图名和Locale解析为View类型的视图，只有⼀<br>个resolveViewName()⽅法。ViewResolver 在这个过程主要完成两件事情：<br>ViewResolver 找到渲染所⽤的模板（第⼀件⼤事）和所⽤的技术（第⼆件⼤事，其实也就是找到<br>视图的类型，如JSP）并填⼊参数。默认情况下，Spring MVC会⾃动为我们配置⼀个<br>InternalResourceViewResolver,是针对 JSP 类型视图的。</p>
</li>
<li><p><strong>RequestToViewNameTranslator</strong></p>
<p>RequestToViewNameTranslator 组件的作⽤是从请求中获取 ViewName.因为 ViewResolver 根据<br>ViewName 查找 View，但有的 Handler 处理完成之后,没有设置 View，也没有设置 ViewName，<br>便要通过这个组件从请求中查找 ViewName。</p>
</li>
<li><p><strong>LocaleResolver</strong></p>
<p>ViewResolver 组件的 resolveViewName ⽅法需要两个参数，⼀个是视图名，⼀个是 Locale。<br>LocaleResolver ⽤于从请求中解析出 Locale，⽐如中国 Locale 是 zh-CN，⽤来表示⼀个区域。这<br>个组件也是 i18n 的基础。</p>
</li>
<li><p><strong>ThemeResolver</strong></p>
<p>ThemeResolver 组件是⽤来解析主题的。主题是样式、图⽚及它们所形成的显示效果的集合。</p>
</li>
<li><p><strong>MultipartResolver</strong></p>
<p>MultipartResolver ⽤于上传请求，通过将普通的请求包装成 MultipartHttpServletRequest 来实<br>现。MultipartHttpServletRequest 可以通过 getFile() ⽅法 直接获得⽂件。如果上传多个⽂件，还<br>可以调⽤ getFileMap()⽅法得到Map&lt;FileName，File&gt;这样的结构，MultipartResolver 的作⽤就<br>是封装普通的请求，使其拥有⽂件上传的功能。</p>
</li>
<li><p><strong>FlashMapManager</strong></p>
<p>FlashMap ⽤于重定向时的参数传递，只需要在重定向之前将要传递的数据写⼊请求（可以通过<br>ServletRequestAttributes.getRequest()⽅法获得）的属性OUTPUT_FLASH_MAP_ATTRIBUTE<br>中，这样在重定向之后的Handler中Spring就会⾃动将其设置到Model中，在显示订单信息的⻚⾯<br>上就可以直接从Model中获取数据。FlashMapManager 就是⽤来管理 FalshMap 的。</p>
</li>
</ul>
<h2 id="拦截器-Inteceptor"><a href="#拦截器-Inteceptor" class="headerlink" title="拦截器(Inteceptor)"></a>拦截器(Inteceptor)</h2><h3 id="监听器、过滤器和拦截器对⽐"><a href="#监听器、过滤器和拦截器对⽐" class="headerlink" title="监听器、过滤器和拦截器对⽐"></a>监听器、过滤器和拦截器对⽐</h3><ul>
<li><p>Servlet：处理Request请求和Response响应</p>
</li>
<li><p>过滤器（Filter）：对Request请求起到过滤的作⽤，作⽤在Servlet之前，如果配置为/*可以对所有的资源访问（servlet、js/css静态资源等）进⾏过滤处理</p>
</li>
<li><p>监听器（Listener）：实现了javax.servlet.ServletContextListener 接⼝的服务器端组件，它随Web应⽤的启动⽽启动，只初始化⼀次，然后会⼀直运⾏监视，随Web应⽤的停⽌⽽销毁</p>
<p><strong>作⽤⼀：</strong>做⼀些初始化⼯作，web应⽤中spring容器启动ContextLoaderListener</p>
<p><strong>作⽤⼆：</strong>监听web中的特定事件，⽐如HttpSession,ServletRequest的创建和销毁；变量的创建、销毁和修改等。可以在某些动作前后增加处理，实现监控，⽐如统计在线⼈数，利⽤HttpSessionLisener等。</p>
</li>
<li><p>拦截器（Interceptor）：是SpringMVC、Struts等表现层框架⾃⼰的，不会拦截jsp/html/css/image的访问等，只会拦截访问的控制器⽅法（Handler）。</p>
<p>从配置的⻆度也能够总结发现：serlvet、filter、listener是配置在web.xml中的，⽽interceptor是配置在表现层框架⾃⼰的配置⽂件中的</p>
<ul>
<li>在Handler业务逻辑执⾏之前拦截⼀次</li>
<li>在Handler逻辑执⾏完毕但未跳转⻚⾯之前拦截⼀次</li>
<li>在跳转⻚⾯之后拦截⼀次</li>
</ul>
</li>
</ul>
<h3 id="拦截器的执⾏流程"><a href="#拦截器的执⾏流程" class="headerlink" title="拦截器的执⾏流程"></a>拦截器的执⾏流程</h3><p><img src="https://gitee.com/KenChan8848/images/raw/master/SpringMVC%E4%B8%8EJPA//%E6%8B%A6%E6%88%AA%E5%99%A8%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.jpg" alt="单个拦截器执行流程"></p>
<ol>
<li>程序先执⾏preHandle()⽅法，如果该⽅法的返回值为true，则程序会继续向下执⾏处理器中的⽅<br>法，否则将不再向下执⾏。</li>
<li>在业务处理器（即控制器Controller类）处理完请求后，会执⾏postHandle()⽅法，然后会通过<br>DispatcherServlet向客户端返回响应。</li>
<li>在DispatcherServlet处理完请求后，才会执⾏afterCompletion()⽅法。</li>
</ol>
<h3 id="多个拦截器的执⾏流程"><a href="#多个拦截器的执⾏流程" class="headerlink" title="多个拦截器的执⾏流程"></a>多个拦截器的执⾏流程</h3><p><img src="https://gitee.com/KenChan8848/images/raw/master/SpringMVC%E4%B8%8EJPA//%E5%A4%9A%E4%B8%AA%E6%8B%A6%E6%88%AA%E5%99%A8%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.jpg" alt="多个拦截器执行流程"></p>
<p>从图可以看出，当有多个拦截器同时⼯作时，它们的preHandle()⽅法会按照配置⽂件中拦截器的配置<br>顺序执⾏，⽽它们的postHandle()⽅法和afterCompletion()⽅法则会按照配置顺序的反序执⾏。</p>
<h2 id="SpringMVC-源码"><a href="#SpringMVC-源码" class="headerlink" title="SpringMVC 源码"></a>SpringMVC 源码</h2><h3 id="核心流程"><a href="#核心流程" class="headerlink" title="核心流程"></a>核心流程</h3><ul>
<li>SpringMVC处理请求的流程即为<br>org.springframework.web.servlet.DispatcherServlet#doDispatch⽅法的执⾏过程，其中步骤<br>2、3、4、5是核⼼步骤<br>1）调⽤getHandler()获取到能够处理当前请求的执⾏链 HandlerExecutionChain（Handler+拦截<br>器）<br>但是如何去getHandler的？后⾯进⾏分析<br>2）调⽤getHandlerAdapter()；获取能够执⾏1）中Handler的适配器<br>但是如何去getHandlerAdapter的？后⾯进⾏分析<br>3）适配器调⽤Handler执⾏ha.handle（总会返回⼀个ModelAndView对象）<br>4）调⽤processDispatchResult()⽅法完成视图渲染跳转</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doDispatch</span><span class="params">(HttpServletRequest request, </span></span></span><br><span class="line"><span class="function"><span class="params">                          HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		HttpServletRequest processedRequest = request;</span><br><span class="line">		HandlerExecutionChain mappedHandler = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">boolean</span> multipartRequestParsed = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">		WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			ModelAndView mv = <span class="keyword">null</span>;</span><br><span class="line">			Exception dispatchException = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				<span class="comment">// 1 检查是否是文件上传的请求</span></span><br><span class="line">				processedRequest = checkMultipart(request);</span><br><span class="line">				multipartRequestParsed = (processedRequest != request);</span><br><span class="line"></span><br><span class="line">				<span class="comment">// Determine handler for the current request.</span></span><br><span class="line">				<span class="comment">/*</span></span><br><span class="line"><span class="comment">				 	2 取得处理当前请求的Controller，这里也称为Handler，即处理器</span></span><br><span class="line"><span class="comment">			这里并不是直接返回 Controller，而是返回 HandlerExecutionChain 请求处理链对象</span></span><br><span class="line"><span class="comment">				 	  该对象封装了Handler和Inteceptor</span></span><br><span class="line"><span class="comment">				 */</span></span><br><span class="line">				mappedHandler = getHandler(processedRequest);</span><br><span class="line">				<span class="keyword">if</span> (mappedHandler == <span class="keyword">null</span>) &#123;</span><br><span class="line">					<span class="comment">// 如果 handler 为空，则返回404</span></span><br><span class="line">					noHandlerFound(processedRequest, response);</span><br><span class="line">					<span class="keyword">return</span>;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="comment">// Determine handler adapter for the current request.</span></span><br><span class="line">				<span class="comment">// 3 获取处理请求的处理器适配器 HandlerAdapter</span></span><br><span class="line">				HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());</span><br><span class="line"></span><br><span class="line">				<span class="comment">// Process last-modified header, if supported by the handler.</span></span><br><span class="line">				<span class="comment">// 处理 last-modified 请求头</span></span><br><span class="line">				String method = request.getMethod();</span><br><span class="line">				<span class="keyword">boolean</span> isGet = <span class="string">"GET"</span>.equals(method);</span><br><span class="line">				<span class="keyword">if</span> (isGet || <span class="string">"HEAD"</span>.equals(method)) &#123;</span><br><span class="line">					<span class="keyword">long</span> lastModified = ha.getLastModified(request, </span><br><span class="line">                                                          mappedHandler.getHandler());</span><br><span class="line">					<span class="keyword">if</span> (<span class="keyword">new</span> ServletWebRequest(request,</span><br><span class="line">                                              response).checkNotModified(lastModified)</span><br><span class="line">                        					  &amp;&amp; isGet) &#123;</span><br><span class="line">						<span class="keyword">return</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class="line">					<span class="keyword">return</span>;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="comment">// Actually invoke the handler.</span></span><br><span class="line">				<span class="comment">// 4 实际处理器处理请求，返回结果视图对象</span></span><br><span class="line">				mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">					<span class="keyword">return</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="comment">// 结果视图对象的处理</span></span><br><span class="line">				applyDefaultViewName(processedRequest, mv);</span><br><span class="line">				mappedHandler.applyPostHandle(processedRequest, response, mv);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">				dispatchException = ex;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">catch</span> (Throwable err) &#123;</span><br><span class="line">				<span class="comment">// As of 4.3, we're processing Errors thrown from</span></span><br><span class="line">                <span class="comment">// handler methods as well,</span></span><br><span class="line">				<span class="comment">// making them available for @ExceptionHandler methods</span></span><br><span class="line">                <span class="comment">// and other scenarios.</span></span><br><span class="line">				dispatchException = <span class="keyword">new</span> NestedServletException(<span class="string">"Handler dispatch failed"</span>, err);</span><br><span class="line">			&#125;</span><br><span class="line">			processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">			<span class="comment">//最终会调用HandlerInterceptor的afterCompletion 方法</span></span><br><span class="line">			triggerAfterCompletion(processedRequest, response, mappedHandler, ex);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (Throwable err) &#123;</span><br><span class="line">			<span class="comment">//最终会调用HandlerInterceptor的afterCompletion 方法</span></span><br><span class="line">			triggerAfterCompletion(processedRequest, response, </span><br><span class="line">                                   mappedHandler,</span><br><span class="line">                                   <span class="keyword">new</span> NestedServletException(<span class="string">"Handler processing failed"</span>, err));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">finally</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">				<span class="comment">// Instead of postHandle and afterCompletion</span></span><br><span class="line">				<span class="keyword">if</span> (mappedHandler != <span class="keyword">null</span>) &#123;</span><br><span class="line">					mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="comment">// Clean up any resources used by a multipart request.</span></span><br><span class="line">				<span class="keyword">if</span> (multipartRequestParsed) &#123;</span><br><span class="line">					cleanupMultipart(processedRequest);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<h3 id="getHandler⽅法剖析"><a href="#getHandler⽅法剖析" class="headerlink" title="getHandler⽅法剖析"></a>getHandler⽅法剖析</h3><p>遍历两个HandlerMapping，试图获取能够处理当前请求的执⾏链</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> HandlerExecutionChain <span class="title">getHandler</span><span class="params">(HttpServletRequest request)</span> </span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.handlerMappings != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">for</span> (HandlerMapping mapping : <span class="keyword">this</span>.handlerMappings) &#123;</span><br><span class="line">				HandlerExecutionChain handler = mapping.getHandler(request);</span><br><span class="line">				<span class="keyword">if</span> (handler != <span class="keyword">null</span>) &#123;</span><br><span class="line">					<span class="keyword">return</span> handler;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<h3 id="getHandlerAdapter⽅法剖析"><a href="#getHandlerAdapter⽅法剖析" class="headerlink" title="getHandlerAdapter⽅法剖析"></a>getHandlerAdapter⽅法剖析</h3><p>遍历各个HandlerAdapter，看哪个Adapter⽀持处理当前Handler</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> HandlerAdapter <span class="title">getHandlerAdapter</span><span class="params">(Object handler)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.handlerAdapters != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">for</span> (HandlerAdapter adapter : <span class="keyword">this</span>.handlerAdapters) &#123;</span><br><span class="line">				<span class="keyword">if</span> (adapter.supports(handler)) &#123;</span><br><span class="line">					<span class="keyword">return</span> adapter;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">"No adapter for handler ["</span> + handler +</span><br><span class="line">				<span class="string">"]: The DispatcherServlet configuration needs to include a HandlerAdapter that supports this handler"</span>);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<h3 id="ha-handle⽅法剖析"><a href="#ha-handle⽅法剖析" class="headerlink" title="ha.handle⽅法剖析"></a>ha.handle⽅法剖析</h3><p>实际调用的是org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter#handleInternal</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">handleInternal</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                                      HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                                      HandlerMethod handlerMethod)</span> </span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">		ModelAndView mav;</span><br><span class="line">		checkRequest(request);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Execute invokeHandlerMethod in synchronized block if required.</span></span><br><span class="line">		<span class="comment">// 判断当前是否需要支持在同一个session中只能线性地处理请求</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.synchronizeOnSession) &#123;</span><br><span class="line">			<span class="comment">// 获取当前请求的session对象</span></span><br><span class="line">			HttpSession session = request.getSession(<span class="keyword">false</span>);</span><br><span class="line">			<span class="keyword">if</span> (session != <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="comment">// 为当前session生成一个唯一的可以用于锁定的key</span></span><br><span class="line">				Object mutex = WebUtils.getSessionMutex(session);</span><br><span class="line">				<span class="keyword">synchronized</span> (mutex) &#123;</span><br><span class="line">					<span class="comment">// 对HandlerMethod进行参数等的适配处理，并调用目标handler</span></span><br><span class="line">					mav = invokeHandlerMethod(request, response, handlerMethod);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="comment">// No HttpSession available -&gt; no mutex necessary</span></span><br><span class="line">				<span class="comment">// 如果当前不存在session，则直接对HandlerMethod进行适配</span></span><br><span class="line">				mav = invokeHandlerMethod(request, response, handlerMethod);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">// No synchronization on session demanded at all...</span></span><br><span class="line">			<span class="comment">// 如果当前不需要对session进行同步处理，则直接对HandlerMethod进行适配</span></span><br><span class="line">			mav = invokeHandlerMethod(request, response, handlerMethod);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (!response.containsHeader(HEADER_CACHE_CONTROL)) &#123;</span><br><span class="line">			<span class="keyword">if</span> (getSessionAttributesHandler(handlerMethod).hasSessionAttributes()) &#123;</span><br><span class="line">				applyCacheSeconds(response, </span><br><span class="line">                                  <span class="keyword">this</span>.cacheSecondsForSessionAttributeHandlers);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				prepareResponse(response);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> mav;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<h3 id="processDispatchResult⽅法剖析"><a href="#processDispatchResult⽅法剖析" class="headerlink" title="processDispatchResult⽅法剖析"></a>processDispatchResult⽅法剖析</h3><p>内部核心是调用了</p>
<p>org.springframework.web.servlet.DispatcherServlet#render                                </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processDispatchResult</span><span class="params">(HttpServletRequest request, </span></span></span><br><span class="line"><span class="function"><span class="params">                                   HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   @Nullable HandlerExecutionChain mappedHandler,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   @Nullable ModelAndView mv,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   @Nullable Exception exception)</span> </span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">boolean</span> errorView = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (exception != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (exception <span class="keyword">instanceof</span> ModelAndViewDefiningException) &#123;</span><br><span class="line">				logger.debug(<span class="string">"ModelAndViewDefiningException encountered"</span>, exception);</span><br><span class="line">				mv = ((ModelAndViewDefiningException) exception).getModelAndView();</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				Object handler = (mappedHandler != <span class="keyword">null</span> ? mappedHandler.getHandler() : <span class="keyword">null</span>);</span><br><span class="line">				<span class="comment">//异常处理</span></span><br><span class="line">				mv = processHandlerException(request, response, handler, exception);</span><br><span class="line">				errorView = (mv != <span class="keyword">null</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Did the handler return a view to render?</span></span><br><span class="line">		<span class="keyword">if</span> (mv != <span class="keyword">null</span> &amp;&amp; !mv.wasCleared()) &#123;</span><br><span class="line">			<span class="comment">/***************************************</span></span><br><span class="line"><span class="comment">			****************************************</span></span><br><span class="line"><span class="comment">						核心render方法</span></span><br><span class="line"><span class="comment">			****************************************</span></span><br><span class="line"><span class="comment">			****************************************/</span></span><br><span class="line">			render(mv, request, response);</span><br><span class="line">			<span class="keyword">if</span> (errorView) &#123;</span><br><span class="line">				WebUtils.clearErrorRequestAttributes(request);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">				logger.trace(<span class="string">"No view rendering, null ModelAndView returned."</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;</span><br><span class="line">			<span class="comment">// Concurrent handling started during a forward</span></span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (mappedHandler != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="comment">//调用拦截器的拦截方法</span></span><br><span class="line">			mappedHandler.triggerAfterCompletion(request, response, <span class="keyword">null</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>再嵌套调用了 </p>
<p>​        org.springframework.web.servlet.view.AbstractView#render</p>
<p>​                   org.springframework.web.servlet.view.InternalResourceView#renderMergedOutputModel</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">renderMergedOutputModel</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    Map&lt;String, Object&gt; model, </span></span></span><br><span class="line"><span class="function"><span class="params">    HttpServletRequest request, </span></span></span><br><span class="line"><span class="function"><span class="params">    HttpServletResponse response)</span> </span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Expose the model object as request attributes.</span></span><br><span class="line">		<span class="comment">//对request 设置属性值</span></span><br><span class="line">		exposeModelAsRequestAttributes(model, request);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Expose helpers as request attributes, if any.</span></span><br><span class="line">		exposeHelpers(request);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Determine the path for the request dispatcher.</span></span><br><span class="line">		String dispatcherPath = prepareForRendering(request, response);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Obtain a RequestDispatcher for the target resource (typically a JSP).</span></span><br><span class="line">		RequestDispatcher rd = getRequestDispatcher(request, dispatcherPath);</span><br><span class="line">		<span class="keyword">if</span> (rd == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">"Could not get RequestDispatcher for ["</span></span><br><span class="line">                                       + getUrl() +</span><br><span class="line">                                       <span class="string">"]: Check that the corresponding file exists within your web application archive!"</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// If already included or response already committed, perform include, else forward.</span></span><br><span class="line">		<span class="keyword">if</span> (useInclude(request, response)) &#123;</span><br><span class="line">			response.setContentType(getContentType());</span><br><span class="line">			<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">				logger.debug(<span class="string">"Including ["</span> + getUrl() + <span class="string">"]"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			rd.include(request, response);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">// Note: The forwarded resource is supposed to determine the content type itself.</span></span><br><span class="line">			<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">				logger.debug(<span class="string">"Forwarding to ["</span> + getUrl() + <span class="string">"]"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">            <span class="comment">/* 跳转页面的操作 */</span></span><br><span class="line">			rd.forward(request, response);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>





<h2 id="Spring-Data-JPA"><a href="#Spring-Data-JPA" class="headerlink" title="Spring Data JPA"></a>Spring Data JPA</h2><p>Spring Data JPA 是 Spring 提供的⼀个封装了JPA 操作的框架，⽽ JPA 仅仅是规范，单独使⽤规范⽆法<br>具体做什么，那么Spring Data JPA 、 JPA规范 以及 Hibernate （JPA 规范的⼀种实现）之间的关系是什<br>么？</p>
<p><img src="https://gitee.com/KenChan8848/images/raw/master/SpringMVC%E4%B8%8EJPA//JPA.jpg" alt="JPA"></p>
<p>JPA 是⼀套规范，内部是由接⼝和抽象类组成的，Hiberanate 是⼀套成熟的 ORM 框架，⽽且<br>Hiberanate 实现了 JPA 规范，所以可以称 Hiberanate 为 JPA 的⼀种实现⽅式，我们使⽤ JPA 的 API 编<br>程，意味着站在更⾼的⻆度去看待问题（⾯向接⼝编程）。</p>
]]></content>
      <categories>
        <category>框架</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>SpringMVC</tag>
        <tag>JPA</tag>
      </tags>
  </entry>
</search>
